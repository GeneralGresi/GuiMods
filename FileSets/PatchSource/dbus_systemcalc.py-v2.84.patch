--- /Users/Kevin/GitHub/GuiMods.copy/FileSets/PatchSource/dbus_systemcalc.py-v2.84.orig	2024-07-08 07:47:23
+++ /Users/Kevin/GitHub/GuiMods.copy/FileSets/PatchSource/dbus_systemcalc.py-v2.84	2023-08-31 21:32:44
@@ -1,6 +1,8 @@
 #!/usr/bin/python3 -u
 # -*- coding: utf-8 -*-
 
+#### modified for GuiMods
+
 from dbus.mainloop.glib import DBusGMainLoop
 import dbus
 import argparse
@@ -74,6 +76,23 @@
 				'/Ac/Out/L1/P': dummy,
 				'/Ac/Out/L2/P': dummy,
 				'/Ac/Out/L3/P': dummy,
+#### add for GuiMods
+				'/Ac/Out/L1/I': dummy,
+				'/Ac/Out/L2/I': dummy,
+				'/Ac/Out/L3/I': dummy,
+				'/Ac/Out/L1/V': dummy,
+				'/Ac/Out/L2/V': dummy,
+				'/Ac/Out/L3/V': dummy,
+				'/Ac/Out/L1/F': dummy,
+				'/Ac/Out/L2/F': dummy,
+				'/Ac/Out/L3/F': dummy,
+				'/Ac/ActiveIn/L1/V': dummy,
+				'/Ac/ActiveIn/L2/V': dummy,
+				'/Ac/ActiveIn/L3/V': dummy,
+				'/Ac/ActiveIn/L1/F': dummy,
+				'/Ac/ActiveIn/L2/F': dummy,
+				'/Ac/ActiveIn/L3/F': dummy,
+
 				'/Connected': dummy,
 				'/ProductId': dummy,
 				'/ProductName': dummy,
@@ -108,7 +127,17 @@
 				'/DeviceType' : dummy,
 				'/Ac/L1/Power': dummy,
 				'/Ac/L2/Power': dummy,
-				'/Ac/L3/Power': dummy},
+				'/Ac/L3/Power': dummy,
+#### add for GuiMods
+				'/Ac/L1/Current': dummy,
+				'/Ac/L2/Current': dummy,
+				'/Ac/L3/Current': dummy,
+				'/Ac/L1/Voltage': dummy,
+				'/Ac/L2/Voltage': dummy,
+				'/Ac/L3/Voltage': dummy,
+				'/Ac/L1/Frequency': dummy,
+				'/Ac/L2/Frequency': dummy,
+				'/Ac/L3/Frequency': dummy},
 			'com.victronenergy.genset' : {
 				'/Connected': dummy,
 				'/ProductName': dummy,
@@ -118,6 +147,17 @@
 				'/Ac/L1/Power': dummy,
 				'/Ac/L2/Power': dummy,
 				'/Ac/L3/Power': dummy,
+#### add for GuiMods
+				'/Ac/L1/Current': dummy,
+				'/Ac/L2/Current': dummy,
+				'/Ac/L3/Current': dummy,
+				'/Ac/L1/Voltage': dummy,
+				'/Ac/L2/Voltage': dummy,
+				'/Ac/L3/Voltage': dummy,
+				'/Ac/L1/Frequency': dummy,
+				'/Ac/L2/Frequency': dummy,
+				'/Ac/L3/Frequency': dummy,
+
 				'/StarterVoltage': dummy},
 			'com.victronenergy.settings' : {
 				'/Settings/SystemSetup/AcInput1' : dummy,
@@ -135,8 +175,13 @@
 				'/Dc/0/Voltage': dummy,
 				'/Dc/0/Current': dummy,
 				'/Ac/Out/L1/P': dummy,
+				'/Ac/Out/L1/V': dummy,
+				'/Ac/Out/L1/I': dummy,
+#### add for GuiMods
 				'/Ac/Out/L1/V': dummy,
 				'/Ac/Out/L1/I': dummy,
+				'/Ac/Out/L1/F': dummy,
+
 				'/Yield/Power': dummy,
 				'/Soc': dummy},
 			'com.victronenergy.dcsystem': {
@@ -270,6 +315,49 @@
 			'/Ac/ActiveIn/L2/Power': {'gettext': '%.0F W'},
 			'/Ac/ActiveIn/L3/Power': {'gettext': '%.0F W'},
 			'/Ac/ActiveIn/NumberOfPhases': {'gettext': '%d'},
+#### added for GuiMods
+			'/Ac/Grid/L1/Current': {'gettext': '%.1F A'},
+			'/Ac/Grid/L2/Current': {'gettext': '%.1F A'},
+			'/Ac/Grid/L3/Current': {'gettext': '%.1F A'},
+			'/Ac/Grid/L1/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Grid/L2/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Grid/L3/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Grid/Frequency': {'gettext': '%.1F Hz'},
+			'/Ac/Genset/L1/Current': {'gettext': '%.1F A'},
+			'/Ac/Genset/L2/Current': {'gettext': '%.1F A'},
+			'/Ac/Genset/L3/Current': {'gettext': '%.1F A'},
+			'/Ac/Genset/L1/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Genset/L2/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Genset/L3/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Genset/Frequency': {'gettext': '%.1F Hz'},
+			'/Ac/ConsumptionOnOutput/L1/Current': {'gettext': '%.1F A'},
+			'/Ac/ConsumptionOnOutput/L2/Current': {'gettext': '%.1F A'},
+			'/Ac/ConsumptionOnOutput/L3/Current': {'gettext': '%.1F A'},
+			'/Ac/ConsumptionOnOutput/L1/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ConsumptionOnOutput/L2/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ConsumptionOnOutput/L3/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ConsumptionOnOutput/Frequency': {'gettext': '%.1F Hz'},
+			'/Ac/ConsumptionOnInput/L1/Current': {'gettext': '%.1F A'},
+			'/Ac/ConsumptionOnInput/L2/Current': {'gettext': '%.1F A'},
+			'/Ac/ConsumptionOnInput/L3/Current': {'gettext': '%.1F A'},
+			'/Ac/ConsumptionOnInput/L1/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ConsumptionOnInput/L2/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ConsumptionOnInput/L3/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ConsumptionOnInput/Frequency': {'gettext': '%.1F Hz'},
+			'/Ac/Consumption/L1/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Consumption/L2/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Consumption/L3/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Consumption/L1/Current': {'gettext': '%.1F A'},
+			'/Ac/Consumption/L2/Current': {'gettext': '%.1F A'},
+			'/Ac/Consumption/L3/Current': {'gettext': '%.1F A'},
+			'/Ac/Consumption/Frequency': {'gettext': '%.1F Hz'},
+			'/Ac/ActiveIn/L1/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ActiveIn/L2/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ActiveIn/L3/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ActiveIn/L1/Current': {'gettext': '%.1F A'},
+			'/Ac/ActiveIn/L2/Current': {'gettext': '%.1F A'},
+			'/Ac/ActiveIn/L3/Current': {'gettext': '%.1F A'},
+			'/Ac/ActiveIn/Frequency': {'gettext': '%.1F Hz'},
 		}
 
 		for m in self._modules:
@@ -777,6 +865,13 @@
 				ac_in_guess = 2
 
 		consumption = { "L1" : None, "L2" : None, "L3" : None }
+#### added for GuiMods
+		currentconsumption = { "L1" : None, "L2" : None, "L3" : None }
+		voltageIn = { "L1" : None, "L2" : None, "L3" : None }
+		voltageOut = { "L1" : None, "L2" : None, "L3" : None }
+		frequencyIn = None
+		frequencyOut = None
+
 		for device_type, em, _types in (('Grid', grid_meter, (1, 3)), ('Genset', genset_meter, (2,))):
 			# If a grid meter is present we use values from it. If not, we look at the multi. If it has
 			# AcIn1 or AcIn2 connected to the grid, we use those values.
@@ -787,32 +882,74 @@
 			for phase in consumption:
 				p = None
 				pvpower = newvalues.get('/Ac/PvOn%s/%s/Power' % (device_type, phase))
+#### added for GuiMods
+				mc = None
+				pvcurrent = newvalues.get('/Ac/PvOn%s/%s/Current' % (device_type, phase))
 				if em is not None:
 					p = self._dbusmonitor.get_value(em.service, '/Ac/%s/Power' % phase)
+#### added for GuiMods
+					mc = self._dbusmonitor.get_value(em.service, '/Ac/%s/Current' % phase)
+					if voltageIn[phase] == None:
+						voltageIn[phase] = self._dbusmonitor.get_value(em.service, '/Ac/%s/Voltage' % phase)
+					if frequencyIn == None:
+						frequencyIn = self._dbusmonitor.get_value(em.service, '/Ac/%s/Frequency' % phase)
+
 					# Compute consumption between energy meter and multi (meter power - multi AC in) and
 					# add an optional PV inverter on input to the mix.
 					c = None
+#### added for GuiMods
+					cc = None
 					if uses_active_input:
 						ac_in = self._dbusmonitor.get_value(multi_path, '/Ac/ActiveIn/%s/P' % phase)
 						if ac_in is not None:
-							c = _safeadd(c, -ac_in)
+							try:
+								c = _safeadd(c, -ac_in)
+#### added for GuiMods
+								cc = _safeadd(cc, -self._dbusmonitor.get_value(multi_path, '/Ac/ActiveIn/%s/I' % phase))
+								if voltageIn[phase] == None:
+									voltageIn[phase] = self._dbusmonitor.get_value(em.service, '/Ac/ActiveIn/%s/V' % phase)
+								if frequencyIn == None:
+									frequencyIn = self._dbusmonitor.get_value(em.service, '/Ac/ActiveIn/%s/F' % phase)
+							except TypeError:
+								pass
+
 					# If there's any power coming from a PV inverter in the inactive AC in (which is unlikely),
 					# it will still be used, because there may also be a load in the same ACIn consuming
 					# power, or the power could be fed back to the net.
 					c = _safeadd(c, p, pvpower)
 					consumption[phase] = _safeadd(consumption[phase], _safemax(0, c))
+#### added for GuiMods
+					cc = _safeadd(cc, mc, pvcurrent)
+					currentconsumption[phase] = _safeadd(currentconsumption[phase], _safemax(0, cc))
 				else:
 					if uses_active_input:
 						p = self._dbusmonitor.get_value(multi_path, '/Ac/ActiveIn/%s/P' % phase)
 						if p is not None:
 							consumption[phase] = _safeadd(0, consumption[phase])
+#### added for GuiMods
+							currentconsumption[phase] = _safeadd(0, currentconsumption[phase])
+							mc = self._dbusmonitor.get_value(multi_path, '/Ac/ActiveIn/%s/I' % phase)
+							if voltageIn[phase] == None:
+								voltageIn[phase] = self._dbusmonitor.get_value(multi_path, '/Ac/ActiveIn/%s/V' % phase)
+							if frequencyIn == None:
+								freq = self._dbusmonitor.get_value(multi_path, '/Ac/ActiveIn/%s/F' % phase)
+								if freq != None:
+									frequencyIn = freq
+
 					# No relevant energy meter present. Assume there is no load between the grid and the multi.
 					# There may be a PV inverter present though (Hub-3 setup).
 					if pvpower != None:
 						p = _safeadd(p, -pvpower)
+#### added for GuiMods
+						mc = _safeadd(mc, -pvcurrent)
 				newvalues['/Ac/%s/%s/Power' % (device_type, phase)] = p
 				if ac_in_guess in _types:
 					newvalues['/Ac/ActiveIn/%s/Power' % (phase,)] = p
+#### added for GuiMods
+				newvalues['/Ac/%s/%s/Current' % (device_type, phase)] = mc
+				if p != None:
+					newvalues['/Ac/%s/%s/Voltage' % (device_type, phase)] = voltageIn[phase]
+					newvalues['/Ac/%s/Frequency' % (device_type)] = frequencyIn
 
 			self._compute_number_of_phases('/Ac/%s' % device_type, newvalues)
 			self._compute_number_of_phases('/Ac/ActiveIn', newvalues)
@@ -836,11 +973,26 @@
 			self._dbusmonitor.get_value('com.victronenergy.settings', '/Settings/CGwacs/RunWithoutGridMeter') == 1
 		for phase in consumption:
 			c = None
+#### added for GuiMods
+			a = None
 			if use_ac_out:
 				c = newvalues.get('/Ac/PvOnOutput/%s/Power' % phase)
+#### added for GuiMods
+				a = newvalues.get('/Ac/PvOnOutput/%s/Current' % phase)
+				if voltageOut[phase] == None:
+					voltageOut[phase] = newvalues.get('/Ac/PvOnOutput/%s/Voltage' % phase)
+				if frequencyOut == None:
+					frequencyOut = newvalues.get('/Ac/PvOnOutput/%s/Frequency' % phase)
+
 				if multi_path is None:
 					for inv in vedirect_inverters:
 						ac_out = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/P' % phase)
+#### added for GuiMods
+						i = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/I' % phase)
+						if voltageOut[phase] == None:
+							voltageOut[phase] = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/V' % phase)
+						if frequencyOut == None:
+							frequencyOut = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/F' % phase)
 
 						# Some models don't show power, calculate it
 						if ac_out is None:
@@ -848,14 +1000,37 @@
 							u = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/V' % phase)
 							if None not in (i, u):
 								ac_out = i * u
+#### modified for GuiMods
+								# u = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/V' % phase)
+								if None not in (i, voltageOut[phase]):
+									ac_out = i * voltageOut[phase]
 						c = _safeadd(c, ac_out)
 				else:
 					ac_out = self._dbusmonitor.get_value(multi_path, '/Ac/Out/%s/P' % phase)
 					c = _safeadd(c, ac_out)
 				c = _safemax(0, c)
+#### added for GuiMods
+				a = _safemax(0, a)
 			newvalues['/Ac/ConsumptionOnOutput/%s/Power' % phase] = c
 			newvalues['/Ac/ConsumptionOnInput/%s/Power' % phase] = consumption[phase]
 			newvalues['/Ac/Consumption/%s/Power' % phase] = _safeadd(consumption[phase], c)
+#### added for GuiMods
+			newvalues['/Ac/Consumption/%s/Current' % phase] = _safeadd(currentconsumption[phase], a)
+			newvalues['/Ac/ConsumptionOnOutput/%s/Voltage' % phase] = voltageOut[phase]
+			newvalues['/Ac/ConsumptionOnInput/%s/Voltage' % phase] = voltageIn[phase]
+			if voltageOut[phase] != None:
+				newvalues['/Ac/Consumption/%s/Voltage' % phase] = voltageOut[phase]
+			elif voltageIn[phase] != None:
+				newvalues['/Ac/Consumption/%s/Voltage' % phase] = voltageIn[phase]
+			if frequencyIn != None:
+				newvalues['/Ac/ConsumptionOnInput/Frequency'] = frequencyIn
+			if frequencyOut != None:
+				newvalues['/Ac/ConsumptionOnOutput/Frequency'] = frequencyOut
+			if frequencyOut != None:
+				newvalues['/Ac/Consumption/Frequency'] = frequencyOut
+			elif frequencyIn != None:
+				newvalues['/Ac/Consumption/Frequency'] = frequencyIn
+
 		self._compute_number_of_phases('/Ac/Consumption', newvalues)
 		self._compute_number_of_phases('/Ac/ConsumptionOnOutput', newvalues)
 		self._compute_number_of_phases('/Ac/ConsumptionOnInput', newvalues)
