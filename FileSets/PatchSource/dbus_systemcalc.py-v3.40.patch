--- /Users/Kevin/GitHub/GuiMods.copy/FileSets/PatchSource/dbus_systemcalc.py-v3.40.orig	2024-07-08 07:47:22
+++ /Users/Kevin/GitHub/GuiMods.copy/FileSets/PatchSource/dbus_systemcalc.py-v3.40	2024-07-08 07:46:54
@@ -1,6 +1,8 @@
 #!/usr/bin/python3 -u
 # -*- coding: utf-8 -*-
 
+#### modified for GuiMods
+
 from dbus.mainloop.glib import DBusGMainLoop
 import dbus
 import argparse
@@ -72,6 +74,20 @@
 				'/Ac/Out/L1/I': dummy,
 				'/Ac/Out/L2/I': dummy,
 				'/Ac/Out/L3/I': dummy,
+#### add for GuiMods
+				'/Ac/Out/L1/V': dummy,
+				'/Ac/Out/L2/V': dummy,
+				'/Ac/Out/L3/V': dummy,
+				'/Ac/Out/L1/F': dummy,
+				'/Ac/Out/L2/F': dummy,
+				'/Ac/Out/L3/F': dummy,
+				'/Ac/ActiveIn/L1/V': dummy,
+				'/Ac/ActiveIn/L2/V': dummy,
+				'/Ac/ActiveIn/L3/V': dummy,
+				'/Ac/ActiveIn/L1/F': dummy,
+				'/Ac/ActiveIn/L2/F': dummy,
+				'/Ac/ActiveIn/L3/F': dummy,
+
 				'/Connected': dummy,
 				'/ProductId': dummy,
 				'/ProductName': dummy,
@@ -109,7 +125,14 @@
 				'/Ac/L3/Power': dummy,
 				'/Ac/L1/Current': dummy,
 				'/Ac/L2/Current': dummy,
-				'/Ac/L3/Current': dummy},
+				'/Ac/L3/Current': dummy,
+#### add for GuiMods
+				'/Ac/L1/Voltage': dummy,
+				'/Ac/L2/Voltage': dummy,
+				'/Ac/L3/Voltage': dummy,
+				'/Ac/L1/Frequency': dummy,
+				'/Ac/L2/Frequency': dummy,
+				'/Ac/L3/Frequency': dummy},
 			'com.victronenergy.genset' : {
 				'/Connected': dummy,
 				'/ProductName': dummy,
@@ -122,6 +145,14 @@
 				'/Ac/L1/Current': dummy,
 				'/Ac/L2/Current': dummy,
 				'/Ac/L3/Current': dummy,
+#### add for GuiMods
+				'/Ac/L1/Voltage': dummy,
+				'/Ac/L2/Voltage': dummy,
+				'/Ac/L3/Voltage': dummy,
+				'/Ac/L1/Frequency': dummy,
+				'/Ac/L2/Frequency': dummy,
+				'/Ac/L3/Frequency': dummy,
+
 				'/StarterVoltage': dummy},
 			'com.victronenergy.settings' : {
 				'/Settings/SystemSetup/AcInput1' : dummy,
@@ -151,6 +182,9 @@
 				'/Ac/Out/L3/S': dummy,
 				'/Ac/Out/L3/V': dummy,
 				'/Ac/Out/L3/I': dummy,
+#### add for GuiMods
+				'/Ac/Out/L1/F': dummy,
+
 				'/Yield/Power': dummy,
 				'/Soc': dummy},
 			'com.victronenergy.multi': {
@@ -184,15 +218,26 @@
 				'/Ac/Out/L3/P': dummy,
 				'/Ac/Out/L3/V': dummy,
 				'/Ac/Out/L3/I': dummy,
+#### add for GuiMods
+				'/Ac/Out/L1/F': dummy,
+
 				'/Yield/Power': dummy,
 				'/Soc': dummy},
 			'com.victronenergy.dcsystem': {
 				'/Dc/0/Voltage': dummy,
-				'/Dc/0/Power': dummy,
-				'/Dc/0/Current': dummy,
+				'/Dc/0/Power': dummy
 			},
 			'com.victronenergy.alternator': {
 				'/Dc/0/Power': dummy
+			},
+#### added for GuiMods
+			'com.victronenergy.dcsource': {
+				'/Dc/0/Power': dummy,
+				'/Settings/MonitorMode': dummy
+			},
+			'com.victronenergy.motordrive':
+			{
+				'/Dc/0/Power': dummy
 			}
 		}
 
@@ -233,24 +278,39 @@
 		self._dbusmonitor = self._create_dbus_monitor(dbus_tree, valueChangedCallback=self._dbus_value_changed,
 			deviceAddedCallback=self._device_added, deviceRemovedCallback=self._device_removed)
 
+		# Used to store AC output maximum values for the scenarios:
+		# No AC input connected
+		# Ac input 1 connected
+		# Ac input 2 connected
+		self._acMaxima = {
+			'NoAcIn': 0,
+			'AcIn1': 0,
+			'AcIn2': 0
+		}
+
+		self._minMaxPaths = {
+			'/Ac/In/0/Current/Min': [float(0), -float("inf"), 0],
+			'/Ac/In/1/Current/Min': [float(0), -float("inf"), 0],
+			'/Ac/In/0/Current/Max': [float(0), 0, float("inf")],
+			'/Ac/In/1/Current/Max': [float(0), 0, float("inf")],
+			'/Dc/Input/Power/Max': [float(0), 0, float("inf")],
+			'/Dc/System/Power/Max': [float(0), 0, float("inf")],
+			'/Pv/Power/Max': [float(0), 0, float("inf")]
+		}
+
+		for p in self._acMaxima.keys():
+			self._minMaxPaths['/Ac/%s/Consumption/Current/Max' % p] = [float(0), 0, float("inf")]
+
 		# Connect to localsettings
 		supported_settings = {
 			'batteryservice': ['/Settings/SystemSetup/BatteryService', self.BATSERVICE_DEFAULT, 0, 0],
 			'hasdcsystem': ['/Settings/SystemSetup/HasDcSystem', 0, 0, 1],
 			'useacout': ['/Settings/SystemSetup/HasAcOutSystem', 1, 0, 1],
-			'gaugeautomax': ['/Settings/Gui/Gauges/AutoMax', 1, 0, 1],
-			'acin0min': ['/Settings/Gui/Gauges/Ac/In/0/Current/Min', float(0), -float("inf"), 0],
-			'acin1min': ['/Settings/Gui/Gauges/Ac/In/1/Current/Min', float(0), -float("inf"), 0],
-			'acin0max': ['/Settings/Gui/Gauges/Ac/In/0/Current/Max', float(0), 0, float("inf")],
-			'acin1max': ['/Settings/Gui/Gauges/Ac/In/1/Current/Max', float(0), 0, float("inf")],
-			'dcinmax': ['/Settings/Gui/Gauges/Dc/Input/Power/Max', float(0), 0, float("inf")],
-			'dcsysmax': ['/Settings/Gui/Gauges/Dc/System/Power/Max', float(0), 0, float("inf")],
-			'pvmax': ['/Settings/Gui/Gauges/Pv/Power/Max', float(0), 0, float("inf")],
-			'noacinmax': ['/Settings/Gui/Gauges/Ac/NoAcIn/Consumption/Current/Max', float(0), 0, float("inf")],
-			'acin1max': ['/Settings/Gui/Gauges/Ac/AcIn1/Consumption/Current/Max', float(0), 0, float("inf")],
-			'acin2max': ['/Settings/Gui/Gauges/Ac/AcIn2/Consumption/Current/Max', float(0), 0, float("inf")],
-			}
+			'gaugeautomax': ['/Settings/Gui/Gauges/AutoMax', 1, 0, 1]}
 
+		for p, s in self._minMaxPaths.items():
+			supported_settings[p] = ['/Settings/Gui/Gauges' + p, s[0], s[1], s[2]]
+
 		for m in self._modules:
 			for setting in m.get_settings():
 				supported_settings[setting[0]] = list(setting[1:])
@@ -334,6 +394,8 @@
 			'/Dc/Charger/Power': {'gettext': '%.0F %%'},
 			'/Dc/FuelCell/Power': {'gettext': '%.0F %%'},
 			'/Dc/Alternator/Power': {'gettext': '%.0F W'},
+			'/Dc/Vebus/Current': {'gettext': '%.1F A'},
+			'/Dc/Vebus/Power': {'gettext': '%.0F W'},
 			'/Dc/System/Power': {'gettext': '%.0F W'},
 			'/Dc/System/Current': {'gettext': '%.1F A'},
 			'/Dc/System/MeasurementType': {'gettext': '%d'},
@@ -345,6 +407,41 @@
 			'/Ac/ActiveIn/L2/Current': {'gettext': '%.1F A'},
 			'/Ac/ActiveIn/L3/Current': {'gettext': '%.1F A'},
 			'/Ac/ActiveIn/NumberOfPhases': {'gettext': '%d'},
+			'/Ac/In/0/Current/Min': {'gettext': '%.1F'},
+			'/Ac/In/0/Current/Max': {'gettext': '%.1F'},
+			'/Ac/In/1/Current/Min': {'gettext': '%.1F'},
+			'/Ac/In/1/Current/Max': {'gettext': '%.1F'},
+			'/Ac/Consumption/Current/Max': {'gettext': '%.1F'},
+			'/Pv/Power/Max': {'gettext': '%d'},
+			'/Dc/Input/Power/Max': {'gettext': '%d'},
+			'/Dc/System/Power/Max': {'gettext': '%d'},
+#### added for GuiMods
+			'/Dc/WindGenerator/Power': {'gettext': '%.0F W'},
+			'/Dc/MotorDrive/Power': {'gettext': '%.0F W'},
+			'/Ac/Grid/L1/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Grid/L2/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Grid/L3/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Grid/Frequency': {'gettext': '%.1F Hz'},
+			'/Ac/Genset/L1/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Genset/L2/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Genset/L3/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Genset/Frequency': {'gettext': '%.1F Hz'},
+			'/Ac/ConsumptionOnOutput/L1/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ConsumptionOnOutput/L2/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ConsumptionOnOutput/L3/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ConsumptionOnOutput/Frequency': {'gettext': '%.1F Hz'},
+			'/Ac/ConsumptionOnInput/L1/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ConsumptionOnInput/L2/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ConsumptionOnInput/L3/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ConsumptionOnInput/Frequency': {'gettext': '%.1F Hz'},
+			'/Ac/Consumption/L1/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Consumption/L2/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Consumption/L3/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Consumption/Frequency': {'gettext': '%.1F Hz'},
+			'/Ac/ActiveIn/L1/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ActiveIn/L2/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ActiveIn/L3/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ActiveIn/Frequency': {'gettext': '%.1F Hz'},
 		}
 
 		for m in self._modules:
@@ -364,6 +461,9 @@
 		for service, instance in self._dbusmonitor.get_service_list().items():
 			self._device_added(service, instance, do_service_change=False)
 
+#### added for GuiMods
+		self.dcSystemPower = [0, 0, 0]
+
 		self._handleservicechange()
 		self._updatevalues()
 
@@ -613,16 +713,50 @@
 		# ==== ALTERNATOR ====
 		alternators = self._dbusmonitor.get_service_list('com.victronenergy.alternator')
 		for alternator in alternators:
+#### modified for GuiMods
+			# some alternators do not provide a valid power value if not running
+			#	or below a minimum power/current
+			# so fill in a zero power so that the systemcalc power becomes valid
 			# Assume the battery connected to output 0 is the main battery
 			p = self._dbusmonitor.get_value(alternator, '/Dc/0/Power')
 			if p is None:
 				continue
+				p = 0
 
 			if '/Dc/Alternator/Power' not in newvalues:
 				newvalues['/Dc/Alternator/Power'] = p
 			else:
 				newvalues['/Dc/Alternator/Power'] += p
+
+
+#### added for GuiMods
+		# ==== MOTOR DRIVE ====
+		motordrives = self._dbusmonitor.get_service_list('com.victronenergy.motordrive')
+		for motordrive in motordrives:
+			p = self._dbusmonitor.get_value(motordrive, '/Dc/0/Power')
+			if p is None:
+				p = 0
 
+			if '/Dc/MotorDrive/Power' not in newvalues:
+				newvalues['/Dc/MotorDrive/Power'] = p
+			else:
+				newvalues['/Dc/MotorDrive/Power'] += p
+
+#### added for GuiMods
+		# ==== DC SOURCES ====
+		dcSources = self._dbusmonitor.get_service_list('com.victronenergy.dcsource')
+		for dcSource in dcSources:
+			monitorMode = self._dbusmonitor.get_value(dcSource,'/Settings/MonitorMode')
+			# ==== WIND GENERATOR ====
+			if monitorMode == -8:
+				p = self._dbusmonitor.get_value(dcSource, '/Dc/0/Power')
+				if p is None:
+					continue
+				if '/Dc/WindGenerator/Power' not in newvalues:
+					newvalues['/Dc/WindGenerator/Power'] = p
+				else:
+					newvalues['/Dc/WindGenerator/Power'] += p
+
 		# ==== CHARGERS ====
 		chargers = self._dbusmonitor.get_service_list('com.victronenergy.charger')
 		charger_batteryvoltage = None
@@ -787,6 +921,9 @@
 				charger_power = newvalues.get('/Dc/Charger/Power', 0)
 				fuelcell_power = newvalues.get('/Dc/FuelCell/Power', 0)
 				alternator_power = newvalues.get('/Dc/Alternator/Power', 0)
+#### added for GuiMods
+				windgen_power = newvalues.get('/Dc/WindGenerator/Power', 0)
+				motordrive_power = newvalues.get('/Dc/MotorDrive/Power', 0)
 
 				# If there are VE.Direct inverters, remove their power from the
 				# DC estimate. This is done using the AC value when the DC
@@ -802,7 +939,14 @@
 							i, '/Ac/Out/L1/V', 0) * self._dbusmonitor.get_value(
 							i, '/Ac/Out/L1/I', 0)
 				newvalues['/Dc/System/MeasurementType'] = 0 # estimated
-				newvalues['/Dc/System/Power'] = dc_pv_power + charger_power + fuelcell_power + alternator_power + vebuspower + inverter_power - battery_power
+#### changed for GuiMods
+				# average DC system power over 3 passes (seconds) to minimize wild swings in displayed value
+				self.dcSystemPower[2] = self.dcSystemPower[1]
+				self.dcSystemPower[1] = self.dcSystemPower[0]
+#### changed for GuiMods - include wind and motor drive
+				#### was newvalues['/Dc/System/Power'] = dc_pv_power + charger_power + fuelcell_power + alternator_power + vebuspower + inverter_power - battery_power
+				self.dcSystemPower[0] = dc_pv_power + charger_power + fuelcell_power + alternator_power + vebuspower + inverter_power - battery_power + windgen_power - motordrive_power
+				newvalues['/Dc/System/Power'] = (self.dcSystemPower[0] + self.dcSystemPower[1] + self.dcSystemPower[2]) / 3
 				try:
 					newvalues['/Dc/System/Current'] = \
 						newvalues['/Dc/System/Power'] / newvalues['/Dc/Battery/Voltage']
@@ -859,6 +1003,13 @@
 
 		consumption = { "L1" : None, "L2" : None, "L3" : None }
 		currentconsumption = { "L1" : None, "L2" : None, "L3" : None }
+
+#### added for GuiMods
+		voltageIn = { "L1" : None, "L2" : None, "L3" : None }
+		voltageOut = { "L1" : None, "L2" : None, "L3" : None }
+		frequencyIn = None
+		frequencyOut = None
+
 		for device_type, em, _types in (('Grid', grid_meter, (1, 3)), ('Genset', genset_meter, (2,))):
 			# If a grid meter is present we use values from it. If not, we look at the multi. If it has
 			# AcIn1 or AcIn2 connected to the grid, we use those values.
@@ -874,6 +1025,12 @@
 				if em is not None:
 					p = self._dbusmonitor.get_value(em.service, '/Ac/%s/Power' % phase)
 					mc = self._dbusmonitor.get_value(em.service, '/Ac/%s/Current' % phase)
+#### added for GuiMods
+					if voltageIn[phase] == None:
+						voltageIn[phase] = self._dbusmonitor.get_value(em.service, '/Ac/%s/Voltage' % phase)
+					if frequencyIn == None:
+						frequencyIn = self._dbusmonitor.get_value(em.service, '/Ac/%s/Frequency' % phase)
+
 					# Compute consumption between energy meter and multi (meter power - multi AC in) and
 					# add an optional PV inverter on input to the mix.
 					c = None
@@ -883,6 +1040,12 @@
 							try:
 								c = _safeadd(c, -self._dbusmonitor.get_value(multi_path, '/Ac/ActiveIn/%s/P' % phase))
 								cc = _safeadd(cc, -self._dbusmonitor.get_value(multi_path, '/Ac/ActiveIn/%s/I' % phase))
+#### added for GuiMods
+								if voltageIn[phase] == None:
+									voltageIn[phase] = self._dbusmonitor.get_value(em.service, '/Ac/ActiveIn/%s/V' % phase)
+								if frequencyIn == None:
+									frequencyIn = self._dbusmonitor.get_value(em.service, '/Ac/ActiveIn/%s/F' % phase)
+
 							except TypeError:
 								pass
 						elif non_vebus_inverter is not None and active_input in (0, 1):
@@ -890,6 +1053,12 @@
 								try:
 									c = _safeadd(c, -self._dbusmonitor.get_value(i, '/Ac/In/%d/%s/P' % (active_input+1, phase)))
 									cc = _safeadd(cc, -self._dbusmonitor.get_value(i, '/Ac/In/%d/%s/I' % (active_input+1, phase)))
+#### added for GuiMods
+									if voltageIn[phase] == None:
+										voltageIn[phase] = self._dbusmonitor.get_value(i, '/Ac/In/%d/%s/V' % (active_input+1, phase))
+									if frequencyIn == None:
+										frequencyIn = self._dbusmonitor.get_value(i, '/Ac/In/%d/%s/F' % (active_input+1, phase))
+
 								except TypeError:
 									pass
 
@@ -907,12 +1076,26 @@
 							consumption[phase] = _safeadd(0, consumption[phase])
 							currentconsumption[phase] = _safeadd(0, currentconsumption[phase])
 							mc = self._dbusmonitor.get_value(multi_path, '/Ac/ActiveIn/%s/I' % phase)
+#### added for GuiMods
+							if voltageIn[phase] == None:
+								voltageIn[phase] = self._dbusmonitor.get_value(multi_path, '/Ac/ActiveIn/%s/V' % phase)
+							if frequencyIn == None:
+								freq = self._dbusmonitor.get_value(multi_path, '/Ac/ActiveIn/%s/F' % phase)
+								if freq != None:
+									frequencyIn = freq
+
 						elif non_vebus_inverter is not None and active_input in (0, 1):
 							for i in non_vebus_inverters:
 								p = _safeadd(p,
 									self._dbusmonitor.get_value(i, '/Ac/In/%d/%s/P' % (active_input + 1, phase)))
 								mc = _safeadd(mc,
 									self._dbusmonitor.get_value(i, '/Ac/In/%d/%s/I' % (active_input + 1, phase)))
+#### added for GuiMods
+								if voltageIn[phase] == None:
+									voltageIn[phase] = self._dbusmonitor.get_value(i, '/Ac/In/%d/%s/V' % (active_input + 1, phase))
+								if frequencyIn == None:
+									frequencyIn = self._dbusmonitor.get_value(i, '/Ac/In/%d/%s/F' % (active_input + 1, phase))
+
 							if p is not None:
 								consumption[phase] = _safeadd(0, consumption[phase])
 								currentconsumption[phase] = _safeadd(0, currentconsumption[phase])
@@ -927,9 +1110,18 @@
 
 				newvalues['/Ac/%s/%s/Power' % (device_type, phase)] = p
 				newvalues['/Ac/%s/%s/Current' % (device_type, phase)] = mc
+#### added for GuiMods
+				if p != None:
+					newvalues['/Ac/%s/%s/Voltage' % (device_type, phase)] = voltageIn[phase]
+					newvalues['/Ac/%s/Frequency' % (device_type)] = frequencyIn
+
 				if ac_in_guess in _types:
 					newvalues['/Ac/ActiveIn/%s/Power' % (phase,)] = p
 					newvalues['/Ac/ActiveIn/%s/Current' % (phase,)] = mc
+#### added for GuiMods
+					if p != None:
+						newvalues['/Ac/ActiveIn/%s/Voltage' % (phase,)] = voltageIn[phase]
+						newvalues['/Ac/ActiveIn/Frequency'] = frequencyIn
 
 			self._compute_number_of_phases('/Ac/%s' % device_type, newvalues)
 			self._compute_number_of_phases('/Ac/ActiveIn', newvalues)
@@ -960,16 +1152,28 @@
 			if use_ac_out:
 				c = newvalues.get('/Ac/PvOnOutput/%s/Power' % phase)
 				a = newvalues.get('/Ac/PvOnOutput/%s/Current' % phase)
+#### added for GuiMods
+				if voltageOut[phase] == None:
+					voltageOut[phase] = newvalues.get('/Ac/PvOnOutput/%s/Voltage' % phase)
+				if frequencyOut == None:
+					frequencyOut = newvalues.get('/Ac/PvOnOutput/%s/Frequency' % phase)
+
 				if multi_path is None:
 					for inv in non_vebus_inverters:
 						ac_out = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/P' % phase)
 						i = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/I' % phase)
+#### added for GuiMods
+						if voltageOut[phase] == None:
+							voltageOut[phase] = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/V' % phase)
+						if frequencyOut == None:
+							frequencyOut = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/F' % phase)
 
 						# Some models don't show power, try apparent power,
 						# else calculate it
 						if ac_out is None:
 							ac_out = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/S' % phase)
 							if ac_out is None:
+#### modified for GuiMods
 								u = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/V' % phase)
 								if None not in (i, u):
 									ac_out = i * u
@@ -980,6 +1184,11 @@
 					c = _safeadd(c, ac_out)
 					i_out = self._dbusmonitor.get_value(multi_path, '/Ac/Out/%s/I' % phase)
 					a = _safeadd(a, i_out)
+#### added for GuiMods
+					if voltageOut[phase] == None:
+						voltageOut[phase] = self._dbusmonitor.get_value(multi_path, '/Ac/Out/%s/V' % phase)
+					if frequencyOut == None:
+						frequencyOut = self._dbusmonitor.get_value(multi_path, '/Ac/Out/%s/F' % phase)
 				c = _safemax(0, c)
 				a = _safemax(0, a)
 			newvalues['/Ac/ConsumptionOnOutput/%s/Power' % phase] = c
@@ -988,6 +1197,22 @@
 			newvalues['/Ac/ConsumptionOnInput/%s/Current' % phase] = currentconsumption[phase]
 			newvalues['/Ac/Consumption/%s/Power' % phase] = _safeadd(consumption[phase], c)
 			newvalues['/Ac/Consumption/%s/Current' % phase] = _safeadd(currentconsumption[phase], a)
+#### added for GuiMods
+			newvalues['/Ac/ConsumptionOnOutput/%s/Voltage' % phase] = voltageOut[phase]
+			newvalues['/Ac/ConsumptionOnInput/%s/Voltage' % phase] = voltageIn[phase]
+			if voltageOut[phase] != None:
+				newvalues['/Ac/Consumption/%s/Voltage' % phase] = voltageOut[phase]
+			elif voltageIn[phase] != None:
+				newvalues['/Ac/Consumption/%s/Voltage' % phase] = voltageIn[phase]
+			if frequencyIn != None:
+				newvalues['/Ac/ConsumptionOnInput/Frequency'] = frequencyIn
+			if frequencyOut != None:
+				newvalues['/Ac/ConsumptionOnOutput/Frequency'] = frequencyOut
+			if frequencyOut != None:
+				newvalues['/Ac/Consumption/Frequency'] = frequencyOut
+			elif frequencyIn != None:
+				newvalues['/Ac/Consumption/Frequency'] = frequencyIn
+
 		self._compute_number_of_phases('/Ac/Consumption', newvalues)
 		self._compute_number_of_phases('/Ac/ConsumptionOnOutput', newvalues)
 		self._compute_number_of_phases('/Ac/ConsumptionOnInput', newvalues)
@@ -996,29 +1221,29 @@
 			m.update_values(newvalues)
 
 		# ==== UPDATE MINIMUM AND MAXIMUM LEVELS ====
-		if (self._settings['gaugeautomax']):
-			# min/max values are stored and updated in localsettings
-			# values are stored under /Settings/Gui/Briefview
-			# /Settings/Gui/Gauges/AutoMax:
-			#	1-> Automatic: Gauge limits are updated automatically and stored in localsettings
-			# 	0-> Manual: Gauge limits are entered manually by the user
-			# The gui pulls the gauge limits from localsettings and provides
-			# a means for the user to set them if Automax is off.
+		# min/max values are stored in localsettings and synched once in a while.
+		# values are stored under /Settings/Gui/Briefview
+		# /Settings/Gui/Gauges/AutoMax:
+		#	1-> Automatic: Maxima are updated automatically and synched to localsettings
+		# 	0-> Manual: Maxima are pulled from localsettings.
+		# min/max computations are done here because the _updatevalues method abstracts them
+		# away from the delegates.
 
-			# AC output
-			# This maximum is maintained for 3 situations:
-			# 1: AC input 1 is connected
-			# 2: AC input 2 is connected
-			# 3: No AC input is connected
-			# All 3 scenarios may lead to different maximum values since the capabilities of the system changes.
-			# So 3 different maxima are stored and relayed to /Ac/Consumption/Current/Max based on the active scenario.
-			activeIn = 'acin1' if (self._dbusservice['/Ac/In/0/Connected'] == 1) else \
-						'acin2' if (self._dbusservice['/Ac/In/1/Connected'] == 1) else \
-						'noacin'
+		# AC output
+		# This maximum is maintained for 3 situations:
+		# 1: AC input 1 is connected
+		# 2: AC input 2 is connected
+		# 3: No AC input is connected
+		# All 3 scenarios may lead to different maximum values since the capabilities of the system changes.
+		# So 3 different maxima are stored and relayed to /Ac/Consumption/Current/Max based on the active scenario.
+		activeIn = 'AcIn1' if (self._dbusservice['/Ac/In/0/Connected'] == 1) else \
+					'AcIn2' if (self._dbusservice['/Ac/In/1/Connected'] == 1) else \
+					'NoAcIn'
 
-			# Quattro has 2 AC inputs which cannot be active simultaneously.
-			# activeIn needs to 1 when 'Ac/In/1/Connected' is 1 and can be 0 otherwise.
-			activeInNr = int(activeIn[-1]) -1 if activeIn != 'noacin' else None
+		# Quattro has 2 AC inputs which cannot be active simultaneously.
+		# activeIn needs to 1 when 'Ac/In/1/Connected' is 1 and can be 0 otherwise.
+		if (self._settings['gaugeautomax']):
+			activeInNr = int(activeIn[-1]) -1 if activeIn != 'NoAcIn' else None
 
 			# AC input
 			# Minimum values occur when feeding back to the grid.
@@ -1026,34 +1251,36 @@
 			# Update correct '/Ac/In/..' based on the current active input.
 			# When no inputs are active, paths '/Ac/In/[0/1]/Current/[Min/Max] will all be invalidated.
 			if(activeInNr != None):
-				self._settings['acin%smin' % activeInNr] = min(0,
-																	self._settings['acin%smin' % activeInNr] or float("inf"),
+				newvalues['/Ac/In/%s/Current/Min' % activeInNr] = min(0,
+																	self._dbusservice['/Ac/In/%s/Current/Min' % activeInNr] or float("inf"),
 																	newvalues.get('/Ac/ActiveIn/L1/Current') or float("inf"),
 																	newvalues.get('/Ac/ActiveIn/L2/Current') or float("inf"),
 																	newvalues.get('/Ac/ActiveIn/L3/Current') or float("inf"))
 
-				self._settings['acin%smax' % activeInNr] = max(self._settings['acin%smax' % activeInNr] or 0,
+				newvalues['/Ac/In/%s/Current/Max' % activeInNr] = max(self._dbusservice['/Ac/In/%s/Current/Min' % activeInNr] or 0,
 																	newvalues.get('/Ac/ActiveIn/L1/Current') or 0,
 																	newvalues.get('/Ac/ActiveIn/L2/Current') or 0,
 																	newvalues.get('/Ac/ActiveIn/L3/Current') or 0)
 
-			self._settings['%smax' % activeIn] = max(self._settings['%smax' % activeIn],
+			self._acMaxima[activeIn] = max(self._acMaxima[activeIn],
 																newvalues.get('/Ac/Consumption/L1/Current') or 0,
 																newvalues.get('/Ac/Consumption/L2/Current') or 0,
 																newvalues.get('/Ac/Consumption/L3/Current') or 0)
 
+			newvalues['/Ac/Consumption/Current/Max'] = self._acMaxima[activeIn]
+
 			# DC input
-			self._settings['dcinmax'] = max(self._settings['dcinmax'] or 0,
+			newvalues['/Dc/Input/Power/Max'] = max(self._dbusservice['/Dc/Input/Power/Max'] or 0,
 													sum([newvalues.get('/Dc/Charger/Power') or 0,
 														newvalues.get('/Dc/FuelCell/Power') or 0,
 														newvalues.get('/Dc/Alternator/Power') or 0]))
 
 			# DC output
-			self._settings['dcsysmax'] = _safemax(self._settings['dcsysmax'] or 0,
+			newvalues['/Dc/System/Power/Max'] = _safemax(self._dbusservice['/Dc/System/Power/Max'] or 0,
 															newvalues.get('/Dc/System/Power') or 0)
 
 			# PV power
-			self._settings['pvmax'] = _safemax(self._settings['pvmax'] or 0,
+			newvalues['/Pv/Power/Max'] = _safemax(self._dbusservice['/Pv/Power/Max'] or 0,
 													_safeadd(newvalues.get('/Dc/Pv/Power') or 0,
 													self._dbusservice['/Ac/PvOnGrid/L1/Power'],
 													self._dbusservice['/Ac/PvOnGrid/L2/Power'],
@@ -1065,6 +1292,23 @@
 													self._dbusservice['/Ac/PvOnOutput/L2/Power'],
 													self._dbusservice['/Ac/PvOnOutput/L3/Power']))
 
+			# Sync max values to localsettings (once each second)
+			for p in self._minMaxPaths.keys():
+				if (p in newvalues and newvalues[p] != self._settings[p]):
+					self._settings[p] = newvalues[p]
+
+			# Store the ac maxima values for the 3 different scenarios. These aren't in newvalues.
+			if(self._acMaxima[activeIn] != self._settings['/Ac/%s/Consumption/Current/Max' % activeIn]):
+				self._settings['/Ac/%s/Consumption/Current/Max' % activeIn] = self._acMaxima[activeIn]
+
+		# Manual mode: relay min/max settings from localsettings to newvalues
+		# We have to fill newvalues on every iteration here because if we don't the value in dbusservice is invalidated
+		else:
+			for p in self._minMaxPaths.keys():
+				newvalues[p] = self._settings[p]
+
+			newvalues['/Ac/Consumption/Current/Max'] = self._settings['/Ac/%s/Consumption/Current/Max' % activeIn]
+
 		# ==== UPDATE DBUS ITEMS ====
 		with self._dbusservice as sss:
 			for path in self._summeditems.keys():
