--- /Users/Kevin/GitHub/GuiMods.copy/FileSets/PatchSource/startstop.py-v3.60~25.orig	2025-02-25 09:42:59
+++ /Users/Kevin/GitHub/GuiMods.copy/FileSets/PatchSource/startstop.py-v3.60~25	2025-03-06 09:51:56
@@ -1,5 +1,16 @@
 #!/usr/bin/python -u
 # -*- coding: utf-8 -*-
+
+#### GuiMods v3.60~25
+#### This file has been modified to allow the generator running state derived from the generator digital input
+#### Previous versions also used the genset AC input but this has been removed from this version with recent changes to stock code !!!!!
+#### If the incoming generator state changes, the manual start state is updated
+#### A switch in the generator settings menu controls whethter the incoming state affects manual start or time accumulaiton
+#### It is now possible to start the generator manually and have it stop automatically based on the preset conditions
+####	for automaitc start / stop
+#### warm-up and cool-down periods have been modified in order to work with an external transfer switch
+####	selecting grid or generator ahead of a MultiPlus input.
+#### Search for #### GuiMods to find changes
 
 # Function
 # dbus_generator monitors the dbus for batteries (com.victronenergy.battery.*) and
@@ -272,6 +283,23 @@
 class StartStop(object):
 	_driver = None
 	def __init__(self, instance):
+#### GuiMods	#### TODO: check if any of these are needed
+		logging.info ("GuiMods version of startstop.py")
+		self._currentTime = self._get_monotonic_seconds()
+		self._last_update_mtime = 0
+		self._accumulatedRunTime = 0
+		self._lastIsRunning = False
+		self._externalOverrideDelay = 99
+		self._linkToExternalState = False
+#### GuiMods warm-up / cool-down
+		self._warmUpEndTime = 0
+		self._coolDownEndTime = 0
+		self._ac1isIgnored = False
+		self._ac2isIgnored = False
+		self._activeAcInIsIgnored = False 
+		self._acInIsGenerator = False
+#### end GuiMods
+
 		self._dbusservice = None
 		self._settings = None
 		self._dbusmonitor = None
@@ -302,9 +330,10 @@
 		self._timer_runnning = 0
 
 		# The installer left autostart disabled
-		self._autostart_last_time = self._get_monotonic_seconds()
-		self._remote_start_mode_last_time = self._get_monotonic_seconds()
+		self._autostart_last_time = self._currentTime
+		self._remote_start_mode_last_time = self._currentTime
 
+
 		# Manual battery service selection is deprecated in favour
 		# of getting the values directly from systemcalc, we keep
 		# manual selected services handling for compatibility reasons.
@@ -439,7 +468,15 @@
 
 		# When this startstop instance controls a genset which reports operatinghours, make sure to synchronize with that.
 		self._useGensetHours = self._dbusmonitor.get_value(self._remoteservice, '/Engine/OperatingHours', None) is not None
+
+#### GuiMods
+		# generator input running state
+		# external override active
+		self._dbusservice.add_path('/ExternalOverride', value=None)
+		self._dbusservice['/ExternalOverride'] = False
+		self._ignoreAutoStartCondition = False
 
+
 	@property
 	def _is_running(self):
 		return self._generator_running
@@ -578,13 +615,44 @@
 	def tick(self):
 		if not self._enabled:
 			return
+
+#### GuiMods warm-up / cool-down
+		self._currentTime = self._get_monotonic_seconds ()
+
 		self._check_remote_status()
+#### GuiMods
+		self._linkToExternalState = self._settings['linkManualStartToExternal'] == 1
+		self.syncManualRunToExternalState ()
+
 		self._evaluate_startstop_conditions()
 		self._evaluate_autostart_disabled_alarm()
 		self._detect_generator_at_input()
 		if self._dbusservice['/ServiceCounterReset'] == 1:
 			self._dbusservice['/ServiceCounterReset'] = 0
 
+#### GuiMods warm-up / cool-down
+
+		# shed load for active generator input in warm-up and cool-down
+		# note that external transfer switch might change the state of on generator
+		# so this needs to be checked and load adjusted every pass
+		# restore load for sources no longer in use or if state is not in warm-up/cool-down
+		# restoring load is delayed 1following end of cool-down
+		#	to allow the generator to actually stop producing power
+		state = self._dbusservice['/State']
+		if state in (States.WARMUP, States.COOLDOWN, States.STOPPING):
+			self._set_ignore_ac (True)
+		else:
+			self._set_ignore_ac (False)
+
+		# update cool down end time while running and generator has the load
+		# this is done because acInIsGenerator may change by an external transfer switch
+		# and we want an accurate picture of the cool down end time
+		#	based on the last time the generatot was loaded
+		if state == States.RUNNING and self._acInIsGenerator:
+			self._coolDownEndTime = self._currentTime + self._settings['cooldowntime']
+#### end GuiMods warm-up / cool-down
+
+
 	def _evaluate_startstop_conditions(self):
 		if self.get_error() != Errors.NONE:
 			# First evaluation after an error, log it
@@ -617,10 +685,24 @@
 
 		self._update_runtime()
 
-		if self._evaluate_manual_start():
-			startbycondition = 'manual'
-			start = True
+#### GuiMods
+		# A negative /ManualStartTimer is used by the GUI to signal the generator should start now
+		#	but stop when all auto stop conditions have been met
+		# so we skip manual start evaluation if this is the case
+		#	and set a flag for use below to ignore auto start conditions
+		# the generator is actually started by the auto start/stop logic below
+		if  self._dbusservice['/ManualStartTimer'] < 0 and self._dbusservice['/ManualStart'] == 1:
+			self._dbusservice['/ManualStartTimer'] = 0
+			self._dbusservice['/ManualStart'] = 0
+			self._ignoreAutoStartCondition = True
 
+		else:
+			self._ignoreAutoStartCondition = False
+			if self._evaluate_manual_start():
+				startbycondition = 'manual'
+				start = True
+#### end GuiMods
+
 		# Conditions will only be evaluated if the autostart functionality is enabled
 		if self._settings['autostart'] == 1:
 
@@ -670,18 +752,26 @@
 					start = True
 					startbycondition = 'lossofcommunication'
 
+#### GuiMods
+		## auto start disabled and generator is stopped - clear the 'reached' flags
+		elif self._dbusservice['/State'] == States.STOPPED:
+			for condition, data in self._condition_stack.items():
+				self._reset_condition(data)
+
 		if not start and self._errorstate:
 			self._stop_generator()
 
 		if self._errorstate:
 			return
 
-		mtime = monotonic_time.monotonic_time().to_seconds_double()
 		if start:
 			self._start_generator(startbycondition)
-		elif (int(mtime - self._starttime) >= self._settings['minimumruntime'] * 60
-				or activecondition == 'manual'):
+#### GuiMods
+		# bypass the minimum run time check if External Override is active
+		elif (self._dbusservice['/Runtime'] >= self._settings['minimumruntime'] * 60
+				or activecondition == 'manual') or self._dbusservice['/ExternalOverride']:
 			self._stop_generator()
+#### end GuiMods
 
 	def _update_runtime(self, just_stopped=False):
 		# Update current and accumulated runtime.
@@ -698,8 +788,8 @@
 	def _evaluate_autostart_disabled_alarm(self):
 
 		if self._settings['autostartdisabledalarm'] == 0:
-			self._autostart_last_time = self._get_monotonic_seconds()
-			self._remote_start_mode_last_time = self._get_monotonic_seconds()
+			self._autostart_last_time = self._currentTime
+			self._remote_start_mode_last_time = self._currentTime
 			if self._dbusservice['/Alarms/AutoStartDisabled'] != 0:
 				self._dbusservice['/Alarms/AutoStartDisabled'] = 0
 			if self._dbusservice['/Alarms/RemoteStartModeDisabled'] != 0:
@@ -708,29 +798,31 @@
 
 		# GX auto start/stop alarm
 		if self._settings['autostart'] == 1:
-			self._autostart_last_time = self._get_monotonic_seconds()
+			self._autostart_last_time = self._currentTime
 			if self._dbusservice['/Alarms/AutoStartDisabled'] != 0:
 				self._dbusservice['/Alarms/AutoStartDisabled'] = 0
 		else:
-			timedisabled = self._get_monotonic_seconds() - self._autostart_last_time
+			timedisabled = self._currentTime - self._autostart_last_time
 			if timedisabled > AUTOSTART_DISABLED_ALARM_TIME and self._dbusservice['/Alarms/AutoStartDisabled'] != 2:
 				self.log_info("Autostart was left for more than %i seconds, triggering alarm." % int(timedisabled))
 				self._dbusservice['/Alarms/AutoStartDisabled'] = 2
 
 		# Genset remote start mode alarm
 		if self.get_error() != Errors.REMOTEDISABLED:
-			self._remote_start_mode_last_time = self._get_monotonic_seconds()
+			self._remote_start_mode_last_time = self._currentTime
 			if self._dbusservice['/Alarms/RemoteStartModeDisabled'] != 0:
 				self._dbusservice['/Alarms/RemoteStartModeDisabled'] = 0
 		else:
-			timedisabled = self._get_monotonic_seconds() - self._remote_start_mode_last_time
+			timedisabled = self._currentTime - self._remote_start_mode_last_time
 			if timedisabled > AUTOSTART_DISABLED_ALARM_TIME and self._dbusservice['/Alarms/RemoteStartModeDisabled'] != 2:
 				self.log_info("Autostart was left for more than %i seconds, triggering alarm." % int(timedisabled))
 				self._dbusservice['/Alarms/RemoteStartModeDisabled'] = 2
 
+#### GuiMods warm-up / cool-down - rewrote so acInIsGenerator is updated even if alarm is disabled
 	def _detect_generator_at_input(self):
-		state = self._dbusservice['/State']
+		self._acInIsGenerator = False	# covers all conditions that result in a return
 
+		state = self._dbusservice['/State']
 		if state in [States.STOPPED, States.COOLDOWN, States.WARMUP]:
 			self._reset_power_input_timer()
 			return
@@ -757,16 +849,31 @@
 		# Not connected = 0, connected = 1
 		activein_connected = activein_state == 1
 
+#### GuiMods warm-up / cool-down
+		if self._settings['nogeneratoratacinalarm'] == 0:
+			processAlarm = False
+			self._reset_power_input_timer()
+		else:
+			processAlarm = True
+
 		if generator_acsource and activein_connected:
-			if self._power_input_timer['unabletostart']:
+#### GuiMods warm-up / cool-down
+			self._acInIsGenerator = True
+#### GuiMods warm-up / cool-down
+			if processAlarm and self._power_input_timer['unabletostart']:
 				self.log_info('Generator detected at inverter AC input, alarm removed')
 			self._reset_power_input_timer()
+#### GuiMods warm-up / cool-down
+		elif not processAlarm:
+			self._reset_power_input_timer()
+			return
 		elif self._power_input_timer['timeout'] < self.RETRIES_ON_ERROR:
 			self._power_input_timer['timeout'] += 1
 		elif not self._power_input_timer['unabletostart']:
 			self._power_input_timer['unabletostart'] = True
 			self._dbusservice['/Alarms/NoGeneratorAtAcIn'] = 2
 			self.log_info('Generator not detected at inverter AC input, triggering alarm')
+#### end GuiMods
 
 	def _reset_power_input_timer(self):
 		if self._power_input_timer['timeout'] != 0:
@@ -853,6 +960,18 @@
 		start = condition['reached'] or (value >= startvalue if start_is_greater else value <= startvalue)
 		stop = value <= stopvalue if start_is_greater else value >= stopvalue
 
+#### GuiMods
+		stop = value <= stopvalue if start_is_greater else value >= stopvalue
+		# when starting manually and stopping based on auto stop values,
+		#	start if stop condition is not satisfied
+
+		if self._ignoreAutoStartCondition:
+			start = not stop
+		else:
+			# When the condition is already reached only the stop value can set it to False
+			start = condition['reached'] or (value >= startvalue if start_is_greater else value <= startvalue)
+#### end GuiMods
+
 		# Timed conditions must start/stop after the condition has been reached for a minimum
 		# time.
 		if condition['timed']:
@@ -885,7 +1004,8 @@
 		# If /ManualStartTimer has a value greater than zero will use it to set a stop timer.
 		# If no timer is set, the generator will not stop until the user stops it manually.
 		# Once started by manual start, each evaluation the timer is decreased
-		if self._dbusservice['/ManualStartTimer'] != 0:
+#### GuiMods - change test to > 0 from != 0 to allow for start now / auto stop
+		if self._dbusservice['/ManualStartTimer'] > 0:
 			self._manualstarttimer += time.time() if self._manualstarttimer == 0 else 0
 			self._dbusservice['/ManualStartTimer'] -= int(time.time()) - int(self._manualstarttimer)
 			self._manualstarttimer = time.time()
@@ -1219,31 +1339,40 @@
 		running = state in (States.WARMUP, States.COOLDOWN, States.STOPPING, States.RUNNING)
 		if not (running and remote_running): # STOPPED, ERROR
 			# There is an option to skip warm-up for the inverteroverload condition.
-			if self._settings['warmuptime'] and not (condition == "inverteroverload" and self._settings['inverteroverloadskipwarmup'] == 1):
-				# Remove load while warming up
-				self._set_ignore_ac(True)
+#### GuiMods warm-up / cool-down
+			self.log_info('Starting generator by %s condition' % condition)
+			# if there is a warmup time specified, always go through warm-up state
+			#	regardless of AC input in use
+			warmUpPeriod = self._settings['warmuptime']
+			if warmUpPeriod > 0:
+				self._warmUpEndTime = self._currentTime + warmUpPeriod
+				self.log_info ("starting warm-up")
 				self._dbusservice['/State'] = States.WARMUP
+			# no warm-up go directly to running
 			else:
 				self._dbusservice['/State'] = States.RUNNING
+				self._warmUpEndTime = 0
 
-			self._update_remote_switch()
-			self._starttime = monotonic_time.monotonic_time().to_seconds_double()
+			self._coolDownEndTime = 0
+			self._stoptime = 0
 
-			self.log_info('Starting generator by %s condition' % condition)
+			self._update_remote_switch()
 		else: # WARMUP, COOLDOWN, RUNNING, STOPPING
-			if state == States.WARMUP:
-				if monotonic_time.monotonic_time().to_seconds_double() - self._starttime > self._settings['warmuptime']:
-					self._set_ignore_ac(False) # Release load onto Generator
-					self._dbusservice['/State'] = States.RUNNING
-			elif state in (States.COOLDOWN, States.STOPPING):
+			if state in (States.COOLDOWN, States.STOPPING):
 				# Start request during cool-down run, go back to RUNNING
-				self._set_ignore_ac(False) # Put load back onto Generator
+				self.log_info ("aborting cool-down - returning to running")
 				self._dbusservice['/State'] = States.RUNNING
 
+			elif state == States.WARMUP:
+				if self._currentTime > self._warmUpEndTime:
+					self.log_info ("warm-up complete")
+					self._dbusservice['/State'] = States.RUNNING
+
 			# Update the RunningByCondition
 			if self._dbusservice['/RunningByCondition'] != condition:
 				self.log_info('Generator previously running by %s condition is now running by %s condition'
 							% (self._dbusservice['/RunningByCondition'], condition))
+#### end GuiMods warm-up / cool-down
 
 		self._dbusservice['/RunningByCondition'] = condition
 		self._dbusservice['/RunningByConditionCode'] = RunningConditions.lookup(condition)
@@ -1254,46 +1383,47 @@
 		running = state in (States.WARMUP, States.COOLDOWN, States.STOPPING, States.RUNNING)
 
 		if running or remote_running:
-			if self._settings['cooldowntime'] > 0:
-				if state == States.RUNNING:
-					self._dbusservice['/State'] = States.COOLDOWN
-					self._stoptime = monotonic_time.monotonic_time().to_seconds_double()
+#### GuiMods warm-up / cool-down
+			if state == States.RUNNING:
+				state = States.COOLDOWN
+				if self._currentTime < self._coolDownEndTime:
+					self.log_info ("starting cool-down")
+				elif self._settings['cooldowntime'] != 0:
+					self.log_info ("skipping cool-down -- no AC load on generator")
 
-					# Remove load from Generator
-					self._set_ignore_ac(True)
+			# warm-up should also transition to stopping
+			#	cool-down time will have expired since it's set to 0 when starting
+			#	and there has not yet been a load on the generator
+			if state in (States.WARMUP, States.COOLDOWN):
+				# cool down complete
+				if self._currentTime > self._coolDownEndTime:
+					state = States.STOPPING
+					self.log_info('Stopping generator that was running by %s condition' %
+								str(self._dbusservice['/RunningByCondition']))
+					self._update_remote_switch() # Stop engine
+					self._stoptime = self._currentTime + self._settings['generatorstoptime']
+					if self._currentTime < self._stoptime:
+						self.log_info ("waiting for generator so stop")
+					
+			if state == States.STOPPING:
+				# wait for stop period expired - finish up transition to STOPPED
+				if self._currentTime > self._stoptime:
+					if self._settings['generatorstoptime'] != 0:
+						self.log_info ("generator stop time reached - OK to reconnect AC")
+					state = States.STOPPED
+					self._update_remote_switch()
+					self._dbusservice['/RunningByCondition'] = ''
+					self._dbusservice['/RunningByConditionCode'] = RunningConditions.Stopped
+					self._update_accumulated_time()
+					self._starttime = 0
+					self._dbusservice['/Runtime'] = 0
+					self._dbusservice['/ManualStartTimer'] = 0
+					self._manualstarttimer = 0
+					self._last_runtime_update = 0
 
-					return
-				elif state == States.COOLDOWN:
-					if monotonic_time.monotonic_time().to_seconds_double() - \
-							self._stoptime <= self._settings['cooldowntime']:
-						return # Don't stop engine yet
+		self._dbusservice['/State'] = state
+#### end GuiMods warm-up / cool-down
 
-			# When we arrive here, a stop command was given during warmup, the
-			# cooldown timer expired, or no cooldown was configured. Stop
-			# the engine, but if we're coming from cooldown, delay another
-			# while in the STOPPING state before reactivating AC-in.
-			if state == States.COOLDOWN:
-				self._dbusservice['/State'] = States.STOPPING
-				self._update_remote_switch() # Stop engine
-				return
-			elif state == States.STOPPING:
-				if monotonic_time.monotonic_time().to_seconds_double() - \
-						self._stoptime <= self._settings['cooldowntime'] + self._settings['generatorstoptime']:
-					return # Wait for engine stop
-
-			# All other possibilities are handled now. Cooldown is over or not
-			# configured and we waited for the generator to shut down.
-			self.log_info('Stopping generator that was running by %s condition' %
-						str(self._dbusservice['/RunningByCondition']))
-			self._dbusservice['/RunningByCondition'] = ''
-			self._dbusservice['/RunningByConditionCode'] = RunningConditions.Stopped
-			self._dbusservice['/State'] = States.STOPPED
-			self._update_remote_switch()
-			self._set_ignore_ac(False)
-			self._dbusservice['/ManualStartTimer'] = 0
-			self._manualstarttimer = 0
-			self._starttime = 0
-
 	@property
 	def _ac1_is_generator(self):
 		return self._dbusmonitor.get_value('com.victronenergy.settings',
@@ -1304,15 +1434,41 @@
 		return self._dbusmonitor.get_value('com.victronenergy.settings',
 			'/Settings/SystemSetup/AcInput2') == 2
 
+#### GuiMods warm-up / cool-down
+	# stock code does not handle changes in the input type
+	# which could happen with an external transfer switch
+	# doing things this way should handle it
+
 	def _set_ignore_ac(self, ignore):
 		# This is here so the Multi/Quattro can be told to disconnect AC-in,
 		# so that we can do warm-up and cool-down.
-		if self.multiservice is not None:
-			if self._ac1_is_generator:
-				self._dbusmonitor.set_value_async(self.multiservice, '/Ac/Control/IgnoreAcIn1', dbus.Int32(ignore, variant_level=1))
-			if self._ac2_is_generator:
-				self._dbusmonitor.set_value_async(self.multiservice, '/Ac/Control/IgnoreAcIn2', dbus.Int32(ignore, variant_level=1))
+		if self.multiservice is None:
+			return
+		self._activeAcInIsIgnored = ignore
+		ignore1 = False
+		ignore2 = False
+		if self._ac1_is_generator:
+			ignore1 = ignore
+		elif self._ac2_is_generator:
+			ignore2 = ignore
 
+		if ignore1 != self._ac1isIgnored:
+			if ignore1:
+				self.log_info ("shedding load - AC input 1")
+			else:
+				self.log_info ("restoring load - AC input 1")
+			self._dbusmonitor.set_value_async(self.multiservice, '/Ac/Control/IgnoreAcIn1', dbus.Int32(ignore1, variant_level=1))
+			self._ac1isIgnored = ignore1
+
+		if ignore2 != self._ac2isIgnored:
+			if ignore2:
+				self.log_info ("shedding load - AC input 2")
+			else:
+				self.log_info ("restoring load - AC input 2")
+			self._dbusmonitor.set_value_async(self.multiservice, '/Ac/Control/IgnoreAcIn2', dbus.Int32(ignore2, variant_level=1))
+			self._ac2isIgnored = ignore2
+#### end GuiMods warm-up / cool-down
+
 	def _update_remote_switch(self):
 		# Engine should be started in these states
 		v = self._dbusservice['/State'] in (States.RUNNING, States.WARMUP, States.COOLDOWN)
@@ -1355,3 +1511,42 @@
 
 	def _create_dbus_service(self):
 		return create_dbus_service(self._instance)
+
+#### GuiMods
+# this function connects the generator digital input (if any)
+# to the generator /ManualStart
+#
+# if the generator digital input changes from stopped to running
+# AND no run conditions are active, a manual start is innitiated
+#
+# if the generator digital input changes from running to stopped
+# AND a manual start is active, a manual stop is innitiated
+#
+# /ExternalOverride is used by the GUI to alert the user when there is a conflict
+# between the running state reported by the generator and the expected state
+# /ExternalOverride is True if the states differ
+# activation is delayed 5 seconds to allow transitions to settle
+
+	def syncManualRunToExternalState (self):
+		internalRun = self._dbusservice['/State'] in (States.RUNNING, States.WARMUP, States.COOLDOWN)
+		externalRun = self._is_running
+		# forward input state changes to /ManualStart
+		if self._linkToExternalState and externalRun != self._lastIsRunning:
+			if externalRun and not internalRun:
+				self.log_info ("generator was started externally - syncing ManualStart state")
+				self._dbusservice['/ManualStart'] = 1
+			elif not externalRun and internalRun and self._dbusservice['/ManualStart'] == 1:
+				self.log_info ("generator was stopped externally - syncing ManualStart state")
+				self._dbusservice['/ManualStart'] = 0
+		self._lastIsRunning = externalRun
+
+		# update ExternalOverride
+		if externalRun != internalRun:
+			if self._externalOverrideDelay > 5:
+				self._dbusservice['/ExternalOverride'] = 1
+			else:
+				self._externalOverrideDelay += 1
+		else:
+			self._dbusservice['/ExternalOverride'] = 0
+			self._externalOverrideDelay = 0
+#### end GuiMods
