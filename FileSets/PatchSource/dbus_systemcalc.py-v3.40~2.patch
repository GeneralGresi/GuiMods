--- /Users/Kevin/GitHub/GuiMods.copy/FileSets/PatchSource/dbus_systemcalc.py-v3.40~2.orig	2024-07-08 07:47:23
+++ /Users/Kevin/GitHub/GuiMods.copy/FileSets/PatchSource/dbus_systemcalc.py-v3.40~2	2024-04-04 21:38:40
@@ -1,6 +1,8 @@
 #!/usr/bin/python3 -u
 # -*- coding: utf-8 -*-
 
+#### modified for GuiMods
+
 from dbus.mainloop.glib import DBusGMainLoop
 import dbus
 import argparse
@@ -72,6 +74,20 @@
 				'/Ac/Out/L1/I': dummy,
 				'/Ac/Out/L2/I': dummy,
 				'/Ac/Out/L3/I': dummy,
+#### add for GuiMods
+				'/Ac/Out/L1/V': dummy,
+				'/Ac/Out/L2/V': dummy,
+				'/Ac/Out/L3/V': dummy,
+				'/Ac/Out/L1/F': dummy,
+				'/Ac/Out/L2/F': dummy,
+				'/Ac/Out/L3/F': dummy,
+				'/Ac/ActiveIn/L1/V': dummy,
+				'/Ac/ActiveIn/L2/V': dummy,
+				'/Ac/ActiveIn/L3/V': dummy,
+				'/Ac/ActiveIn/L1/F': dummy,
+				'/Ac/ActiveIn/L2/F': dummy,
+				'/Ac/ActiveIn/L3/F': dummy,
+
 				'/Connected': dummy,
 				'/ProductId': dummy,
 				'/ProductName': dummy,
@@ -109,7 +125,14 @@
 				'/Ac/L3/Power': dummy,
 				'/Ac/L1/Current': dummy,
 				'/Ac/L2/Current': dummy,
-				'/Ac/L3/Current': dummy},
+				'/Ac/L3/Current': dummy,
+#### add for GuiMods
+				'/Ac/L1/Voltage': dummy,
+				'/Ac/L2/Voltage': dummy,
+				'/Ac/L3/Voltage': dummy,
+				'/Ac/L1/Frequency': dummy,
+				'/Ac/L2/Frequency': dummy,
+				'/Ac/L3/Frequency': dummy},
 			'com.victronenergy.genset' : {
 				'/Connected': dummy,
 				'/ProductName': dummy,
@@ -122,6 +145,14 @@
 				'/Ac/L1/Current': dummy,
 				'/Ac/L2/Current': dummy,
 				'/Ac/L3/Current': dummy,
+#### add for GuiMods
+				'/Ac/L1/Voltage': dummy,
+				'/Ac/L2/Voltage': dummy,
+				'/Ac/L3/Voltage': dummy,
+				'/Ac/L1/Frequency': dummy,
+				'/Ac/L2/Frequency': dummy,
+				'/Ac/L3/Frequency': dummy,
+
 				'/StarterVoltage': dummy},
 			'com.victronenergy.settings' : {
 				'/Settings/SystemSetup/AcInput1' : dummy,
@@ -151,6 +182,9 @@
 				'/Ac/Out/L3/S': dummy,
 				'/Ac/Out/L3/V': dummy,
 				'/Ac/Out/L3/I': dummy,
+#### add for GuiMods
+				'/Ac/Out/L1/F': dummy,
+
 				'/Yield/Power': dummy,
 				'/Soc': dummy},
 			'com.victronenergy.multi': {
@@ -184,6 +218,9 @@
 				'/Ac/Out/L3/P': dummy,
 				'/Ac/Out/L3/V': dummy,
 				'/Ac/Out/L3/I': dummy,
+#### add for GuiMods
+				'/Ac/Out/L1/F': dummy,
+
 				'/Yield/Power': dummy,
 				'/Soc': dummy},
 			'com.victronenergy.dcsystem': {
@@ -192,6 +229,15 @@
 			},
 			'com.victronenergy.alternator': {
 				'/Dc/0/Power': dummy
+			},
+#### added for GuiMods
+			'com.victronenergy.dcsource': {
+				'/Dc/0/Power': dummy,
+				'/Settings/MonitorMode': dummy
+			},
+			'com.victronenergy.motordrive':
+			{
+				'/Dc/0/Power': dummy
 			}
 		}
 
@@ -303,7 +349,6 @@
 			'/Ac/Consumption/L1/Current': {'gettext': '%.1F A'},
 			'/Ac/Consumption/L2/Current': {'gettext': '%.1F A'},
 			'/Ac/Consumption/L3/Current': {'gettext': '%.1F A'},
-			'/Ac/Consumption/NumberOfPhases': {'gettext': '%.0F W'},
 			'/Dc/Pv/Power': {'gettext': '%.0F W'},
 			'/Dc/Pv/Current': {'gettext': '%.1F A'},
 			'/Dc/Battery/Voltage': {'gettext': '%.2F V'},
@@ -329,6 +374,33 @@
 			'/Ac/ActiveIn/L2/Current': {'gettext': '%.1F A'},
 			'/Ac/ActiveIn/L3/Current': {'gettext': '%.1F A'},
 			'/Ac/ActiveIn/NumberOfPhases': {'gettext': '%d'},
+#### added for GuiMods
+			'/Dc/WindGenerator/Power': {'gettext': '%.0F W'},
+			'/Dc/MotorDrive/Power': {'gettext': '%.0F W'},
+			'/Ac/Grid/L1/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Grid/L2/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Grid/L3/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Grid/Frequency': {'gettext': '%.1F Hz'},
+			'/Ac/Genset/L1/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Genset/L2/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Genset/L3/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Genset/Frequency': {'gettext': '%.1F Hz'},
+			'/Ac/ConsumptionOnOutput/L1/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ConsumptionOnOutput/L2/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ConsumptionOnOutput/L3/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ConsumptionOnOutput/Frequency': {'gettext': '%.1F Hz'},
+			'/Ac/ConsumptionOnInput/L1/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ConsumptionOnInput/L2/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ConsumptionOnInput/L3/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ConsumptionOnInput/Frequency': {'gettext': '%.1F Hz'},
+			'/Ac/Consumption/L1/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Consumption/L2/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Consumption/L3/Voltage': {'gettext': '%.1F V'},
+			'/Ac/Consumption/Frequency': {'gettext': '%.1F Hz'},
+			'/Ac/ActiveIn/L1/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ActiveIn/L2/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ActiveIn/L3/Voltage': {'gettext': '%.1F V'},
+			'/Ac/ActiveIn/Frequency': {'gettext': '%.1F Hz'},
 		}
 
 		for m in self._modules:
@@ -348,6 +420,9 @@
 		for service, instance in self._dbusmonitor.get_service_list().items():
 			self._device_added(service, instance, do_service_change=False)
 
+#### added for GuiMods
+		self.dcSystemPower = [0, 0, 0]
+
 		self._handleservicechange()
 		self._updatevalues()
 
@@ -596,15 +671,49 @@
 		# ==== ALTERNATOR ====
 		alternators = self._dbusmonitor.get_service_list('com.victronenergy.alternator')
 		for alternator in alternators:
+#### modified for GuiMods
+			# some alternators do not provide a valid power value if not running
+			#	or below a minimum power/current
+			# so fill in a zero power so that the systemcalc power becomes valid
 			# Assume the battery connected to output 0 is the main battery
 			p = self._dbusmonitor.get_value(alternator, '/Dc/0/Power')
 			if p is None:
-				continue
+				#### continue
+				p = 0
 
 			if '/Dc/Alternator/Power' not in newvalues:
 				newvalues['/Dc/Alternator/Power'] = p
 			else:
 				newvalues['/Dc/Alternator/Power'] += p
+
+
+#### added for GuiMods
+		# ==== MOTOR DRIVE ====
+		motordrives = self._dbusmonitor.get_service_list('com.victronenergy.motordrive')
+		for motordrive in motordrives:
+			p = self._dbusmonitor.get_value(motordrive, '/Dc/0/Power')
+			if p is None:
+				p = 0
+
+			if '/Dc/MotorDrive/Power' not in newvalues:
+				newvalues['/Dc/MotorDrive/Power'] = p
+			else:
+				newvalues['/Dc/MotorDrive/Power'] += p
+
+#### added for GuiMods
+		# ==== DC SOURCES ====
+		dcSources = self._dbusmonitor.get_service_list('com.victronenergy.dcsource')
+		for dcSource in dcSources:
+			monitorMode = self._dbusmonitor.get_value(dcSource,'/Settings/MonitorMode')
+			# ==== WIND GENERATOR ====
+			if monitorMode == -8:
+				p = self._dbusmonitor.get_value(dcSource, '/Dc/0/Power')
+				if p is None:
+					continue
+				if '/Dc/WindGenerator/Power' not in newvalues:
+					newvalues['/Dc/WindGenerator/Power'] = p
+				else:
+					newvalues['/Dc/WindGenerator/Power'] += p
 
 		# ==== CHARGERS ====
 		chargers = self._dbusmonitor.get_service_list('com.victronenergy.charger')
@@ -767,6 +876,9 @@
 				charger_power = newvalues.get('/Dc/Charger/Power', 0)
 				fuelcell_power = newvalues.get('/Dc/FuelCell/Power', 0)
 				alternator_power = newvalues.get('/Dc/Alternator/Power', 0)
+#### added for GuiMods
+				windgen_power = newvalues.get('/Dc/WindGenerator/Power', 0)
+				motordrive_power = newvalues.get('/Dc/MotorDrive/Power', 0)
 
 				# If there are VE.Direct inverters, remove their power from the
 				# DC estimate. This is done using the AC value when the DC
@@ -787,7 +899,12 @@
 				# displayed. For now, we leave it out so that in the current
 				# version of Venus it does not break user's expectations.
 				#newvalues['/Dc/System/Power'] = dc_pv_power + charger_power + fuelcell_power + vebuspower + inverter_power - battery_power - alternator_power
-				newvalues['/Dc/System/Power'] = dc_pv_power + charger_power + fuelcell_power + vebuspower + inverter_power - battery_power
+#### changed for GuiMods
+				# average DC system power over 3 passes (seconds) to minimize wild swings in displayed value
+				self.dcSystemPower[2] = self.dcSystemPower[1]
+				self.dcSystemPower[1] = self.dcSystemPower[0]
+				self.dcSystemPower[0] = dc_pv_power + charger_power + fuelcell_power + vebuspower + inverter_power - battery_power + alternator_power + windgen_power - motordrive_power
+				newvalues['/Dc/System/Power'] = (self.dcSystemPower[0] + self.dcSystemPower[1] + self.dcSystemPower[2]) / 3
 
 		elif self._settings['hasdcsystem'] == 1 and solarchargers_loadoutput_power is not None:
 			newvalues['/Dc/System/MeasurementType'] = 0 # estimated
@@ -849,6 +966,13 @@
 
 		consumption = { "L1" : None, "L2" : None, "L3" : None }
 		currentconsumption = { "L1" : None, "L2" : None, "L3" : None }
+
+#### added for GuiMods
+		voltageIn = { "L1" : None, "L2" : None, "L3" : None }
+		voltageOut = { "L1" : None, "L2" : None, "L3" : None }
+		frequencyIn = None
+		frequencyOut = None
+
 		for device_type, em, _types in (('Grid', grid_meter, (1, 3)), ('Genset', genset_meter, (2,))):
 			# If a grid meter is present we use values from it. If not, we look at the multi. If it has
 			# AcIn1 or AcIn2 connected to the grid, we use those values.
@@ -864,6 +988,12 @@
 				if em is not None:
 					p = self._dbusmonitor.get_value(em.service, '/Ac/%s/Power' % phase)
 					mc = self._dbusmonitor.get_value(em.service, '/Ac/%s/Current' % phase)
+#### added for GuiMods
+					if voltageIn[phase] == None:
+						voltageIn[phase] = self._dbusmonitor.get_value(em.service, '/Ac/%s/Voltage' % phase)
+					if frequencyIn == None:
+						frequencyIn = self._dbusmonitor.get_value(em.service, '/Ac/%s/Frequency' % phase)
+
 					# Compute consumption between energy meter and multi (meter power - multi AC in) and
 					# add an optional PV inverter on input to the mix.
 					c = None
@@ -873,6 +1003,12 @@
 							try:
 								c = _safeadd(c, -self._dbusmonitor.get_value(multi_path, '/Ac/ActiveIn/%s/P' % phase))
 								cc = _safeadd(cc, -self._dbusmonitor.get_value(multi_path, '/Ac/ActiveIn/%s/I' % phase))
+#### added for GuiMods
+								if voltageIn[phase] == None:
+									voltageIn[phase] = self._dbusmonitor.get_value(em.service, '/Ac/ActiveIn/%s/V' % phase)
+								if frequencyIn == None:
+									frequencyIn = self._dbusmonitor.get_value(em.service, '/Ac/ActiveIn/%s/F' % phase)
+
 							except TypeError:
 								pass
 						elif non_vebus_inverter is not None and active_input in (0, 1):
@@ -880,6 +1016,12 @@
 								try:
 									c = _safeadd(c, -self._dbusmonitor.get_value(i, '/Ac/In/%d/%s/P' % (active_input+1, phase)))
 									cc = _safeadd(cc, -self._dbusmonitor.get_value(i, '/Ac/In/%d/%s/I' % (active_input+1, phase)))
+#### added for GuiMods
+									if voltageIn[phase] == None:
+										voltageIn[phase] = self._dbusmonitor.get_value(i, '/Ac/In/%d/%s/V' % (active_input+1, phase))
+									if frequencyIn == None:
+										frequencyIn = self._dbusmonitor.get_value(i, '/Ac/In/%d/%s/F' % (active_input+1, phase))
+
 								except TypeError:
 									pass
 
@@ -897,16 +1039,30 @@
 							consumption[phase] = _safeadd(0, consumption[phase])
 							currentconsumption[phase] = _safeadd(0, currentconsumption[phase])
 							mc = self._dbusmonitor.get_value(multi_path, '/Ac/ActiveIn/%s/I' % phase)
+#### added for GuiMods
+							if voltageIn[phase] == None:
+								voltageIn[phase] = self._dbusmonitor.get_value(multi_path, '/Ac/ActiveIn/%s/V' % phase)
+							if frequencyIn == None:
+								freq = self._dbusmonitor.get_value(multi_path, '/Ac/ActiveIn/%s/F' % phase)
+								if freq != None:
+									frequencyIn = freq
+
 						elif non_vebus_inverter is not None and active_input in (0, 1):
 							for i in non_vebus_inverters:
 								p = _safeadd(p,
 									self._dbusmonitor.get_value(i, '/Ac/In/%d/%s/P' % (active_input + 1, phase)))
 								mc = _safeadd(mc,
 									self._dbusmonitor.get_value(i, '/Ac/In/%d/%s/I' % (active_input + 1, phase)))
-							if p is not None:
-								consumption[phase] = _safeadd(0, consumption[phase])
-								currentconsumption[phase] = _safeadd(0, currentconsumption[phase])
+#### added for GuiMods
+								if voltageIn[phase] == None:
+									voltageIn[phase] = self._dbusmonitor.get_value(i, '/Ac/In/%d/%s/V' % (active_input + 1, phase))
+								if frequencyIn == None:
+									frequencyIn = self._dbusmonitor.get_value(i, '/Ac/In/%d/%s/F' % (active_input + 1, phase))
 
+								if p is not None:
+									consumption[phase] = _safeadd(0, consumption[phase])
+									currentconsumption[phase] = _safeadd(0, currentconsumption[phase])
+
 					# No relevant energy meter present. Assume there is no load between the grid and the multi.
 					# There may be a PV inverter present though (Hub-3 setup).
 					try:
@@ -917,9 +1073,18 @@
 
 				newvalues['/Ac/%s/%s/Power' % (device_type, phase)] = p
 				newvalues['/Ac/%s/%s/Current' % (device_type, phase)] = mc
+#### added for GuiMods
+				if p != None:
+					newvalues['/Ac/%s/%s/Voltage' % (device_type, phase)] = voltageIn[phase]
+					newvalues['/Ac/%s/Frequency' % (device_type)] = frequencyIn
+
 				if ac_in_guess in _types:
-					newvalues['/Ac/ActiveIn/%s/Power' % (phase,)] = p
-					newvalues['/Ac/ActiveIn/%s/Current' % (phase,)] = mc
+					newvalues['/Ac/ActiveIn/%s/Power' % phase] = p
+					newvalues['/Ac/ActiveIn/%s/Current' % phase] = mc
+#### added for GuiMods
+					if p != None:
+						newvalues['/Ac/ActiveIn/%s/Voltage' % (phase,)] = voltageIn[phase]
+						newvalues['/Ac/ActiveIn/Frequency'] = frequencyIn
 
 			self._compute_number_of_phases('/Ac/%s' % device_type, newvalues)
 			self._compute_number_of_phases('/Ac/ActiveIn', newvalues)
@@ -950,19 +1115,31 @@
 			if use_ac_out:
 				c = newvalues.get('/Ac/PvOnOutput/%s/Power' % phase)
 				a = newvalues.get('/Ac/PvOnOutput/%s/Current' % phase)
+#### added for GuiMods
+				if voltageOut[phase] == None:
+					voltageOut[phase] = newvalues.get('/Ac/PvOnOutput/%s/Voltage' % phase)
+				if frequencyOut == None:
+					frequencyOut = newvalues.get('/Ac/PvOnOutput/%s/Frequency' % phase)
+
 				if multi_path is None:
 					for inv in non_vebus_inverters:
 						ac_out = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/P' % phase)
 						i = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/I' % phase)
+#### added for GuiMods
+						if voltageOut[phase] == None:
+							voltageOut[phase] = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/V' % phase)
+						if frequencyOut == None:
+							frequencyOut = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/F' % phase)
 
 						# Some models don't show power, try apparent power,
 						# else calculate it
 						if ac_out is None:
 							ac_out = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/S' % phase)
 							if ac_out is None:
-								u = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/V' % phase)
-								if None not in (i, u):
-									ac_out = i * u
+#### modified for GuiMods
+								# u = self._dbusmonitor.get_value(inv, '/Ac/Out/%s/V' % phase)
+								if None not in (i, voltageOut[phase]):
+									ac_out = i * voltageOut[phase]
 						c = _safeadd(c, ac_out)
 						a = _safeadd(a, i)
 				else:
@@ -970,6 +1147,11 @@
 					c = _safeadd(c, ac_out)
 					i_out = self._dbusmonitor.get_value(multi_path, '/Ac/Out/%s/I' % phase)
 					a = _safeadd(a, i_out)
+#### added for GuiMods
+					if voltageOut[phase] == None:
+						voltageOut[phase] = self._dbusmonitor.get_value(multi_path, '/Ac/Out/%s/V' % phase)
+					if frequencyOut == None:
+						frequencyOut = self._dbusmonitor.get_value(multi_path, '/Ac/Out/%s/F' % phase)
 				c = _safemax(0, c)
 				a = _safemax(0, a)
 			newvalues['/Ac/ConsumptionOnOutput/%s/Power' % phase] = c
@@ -978,6 +1160,22 @@
 			newvalues['/Ac/ConsumptionOnInput/%s/Current' % phase] = currentconsumption[phase]
 			newvalues['/Ac/Consumption/%s/Power' % phase] = _safeadd(consumption[phase], c)
 			newvalues['/Ac/Consumption/%s/Current' % phase] = _safeadd(currentconsumption[phase], a)
+#### added for GuiMods
+			newvalues['/Ac/ConsumptionOnOutput/%s/Voltage' % phase] = voltageOut[phase]
+			newvalues['/Ac/ConsumptionOnInput/%s/Voltage' % phase] = voltageIn[phase]
+			if voltageOut[phase] != None:
+				newvalues['/Ac/Consumption/%s/Voltage' % phase] = voltageOut[phase]
+			elif voltageIn[phase] != None:
+				newvalues['/Ac/Consumption/%s/Voltage' % phase] = voltageIn[phase]
+			if frequencyIn != None:
+				newvalues['/Ac/ConsumptionOnInput/Frequency'] = frequencyIn
+			if frequencyOut != None:
+				newvalues['/Ac/ConsumptionOnOutput/Frequency'] = frequencyOut
+			if frequencyOut != None:
+				newvalues['/Ac/Consumption/Frequency'] = frequencyOut
+			elif frequencyIn != None:
+				newvalues['/Ac/Consumption/Frequency'] = frequencyIn
+
 		self._compute_number_of_phases('/Ac/Consumption', newvalues)
 		self._compute_number_of_phases('/Ac/ConsumptionOnOutput', newvalues)
 		self._compute_number_of_phases('/Ac/ConsumptionOnInput', newvalues)
@@ -989,7 +1187,7 @@
 		with self._dbusservice as sss:
 			for path in self._summeditems.keys():
 				# Why the None? Because we want to invalidate things we don't have anymore.
-				sss[path] = newvalues.get(path, None)
+				sss[path] = newvalues.get(path, None)		
 
 	def _handleservicechange(self):
 		# Update the available battery monitor services, used to populate the dropdown in the settings.
