3a4,14
> #### GuiMods
> #### This file has been modified to allow the generator running state derived from the generator digital input
> #### Previous versions also used the genset AC input but this has been removed from this version with recent changes to stock code !!!!!
> #### If the incoming generator state changes, the manual start state is updated
> #### A switch in the generator settings menu controls whethter the incoming state affects manual start or time accumulaiton
> #### It is now possible to start the generator manually and have it stop automatically based on the preset conditions
> ####	for automaitc start / stop
> #### warm-up and cool-down periods have been modified in order to work with an external transfer switch
> ####	selecting grid or generator ahead of a MultiPlus input.
> #### Search for #### GuiMods to find changes
> 
254a266,282
> #### GuiMods	#### TODO: check if any of these are needed
> 		logging.info ("GuiMods version of startstop.py")
> 		self._currentTime = self._get_monotonic_seconds()
> 		self._last_update_mtime = 0
> 		self._accumulatedRunTime = 0
> 		self._lastIsRunning = False
> 		self._externalOverrideDelay = 99
> 		self._linkToExternalState = False
> #### GuiMods warm-up / cool-down
> 		self._warmUpEndTime = 0
> 		self._coolDownEndTime = 0
> 		self._ac1isIgnored = False
> 		self._ac2isIgnored = False
> 		self._activeAcInIsIgnored = False 
> 		self._acInIsGenerator = False
> #### end GuiMods
> 
271a300
> 		self.ERROR_TIMEOUT = 60
285,286c314,315
< 		self._autostart_last_time = self._get_monotonic_seconds()
< 		self._remote_start_mode_last_time = self._get_monotonic_seconds()
---
> 		self._autostart_last_time = self._currentTime
> 		self._remote_start_mode_last_time = self._currentTime
412a442,449
> #### GuiMods
> 		# generator input running state
> 		# external override active
> 		self._dbusservice.add_path('/ExternalOverride', value=None)
> 		self._dbusservice['/ExternalOverride'] = False
> 		self.manualStartAutoStop = False
> 
> 
550a588,591
> 
> #### GuiMods warm-up / cool-down
> 		self._currentTime = self._get_monotonic_seconds ()
> 
551a593,596
> #### GuiMods
> 		self._linkToExternalState = self._settings['linkManualStartToExternal'] == 1
> 		self.syncManualRunToExternalState ()
> 
557a603,625
> #### GuiMods warm-up / cool-down
> 
> 		# shed load for active generator input in warm-up and cool-down
> 		# note that external transfer switch might change the state of on generator
> 		# so this needs to be checked and load adjusted every pass
> 		# restore load for sources no longer in use or if state is not in warm-up/cool-down
> 		# restoring load is delayed 1following end of cool-down
> 		#	to allow the generator to actually stop producing power
> 		state = self._dbusservice['/State']
> 		if state in (States.WARMUP, States.COOLDOWN, States.STOPPING):
> 			self._set_ignore_ac (True)
> 		else:
> 			self._set_ignore_ac (False)
> 
> 		# update cool down end time while running and generator has the load
> 		# this is done because acInIsGenerator may change by an external transfer switch
> 		# and we want an accurate picture of the cool down end time
> 		#	based on the last time the generatot was loaded
> 		if state == States.RUNNING:
> 			self._coolDownEndTime = self._currentTime + self._settings['cooldowntime']
> #### end GuiMods warm-up / cool-down
> 
> 
590,592c658,679
< 		if self._evaluate_manual_start():
< 			startbycondition = 'manual'
< 			start = True
---
> #### GuiMods
> 		# A negative /ManualStartTimer is used by the GUI to signal the generator should start now
> 		#	but stop when all auto stop conditions have been met
> 		# so we skip manual start evaluation if this is the case
> 		#	and set a flag to ignore auto start conditions when evaluating conditional start/stop
> 		# the generator is actually started by the auto start/stop logic in evaluate condition
> 		#   to avoid the generator starting, then stopping immediately if all stop conditions are already met
> 		if  self._dbusservice['/ManualStartTimer'] < 0 and self._dbusservice['/ManualStart'] == 1:
> 			self._dbusservice['/ManualStartTimer'] = 0
> 			self._dbusservice['/ManualStart'] = 0
> 			self.manualStartAutoStop = True
> 			if self._settings['autostart'] == 1:
> 				logging.info ("manual start / auto stop command received")
> 			else:
> 				logging.info ("manual start / auto stop command received - but AutoStart not enabled - generator will not start")
> 
> 		else:
> 			self.manualStartAutoStop = False
> 			if self._evaluate_manual_start():
> 				startbycondition = 'manual'
> 				start = True
> #### end GuiMods
604,605c691,702
< 			stop_on_ac_reached = (self._evaluate_condition(self._condition_stack[StopOnAc1Condition.name]) or
< 						       self._evaluate_condition(self._condition_stack[StopOnAc2Condition.name]))
---
> #### GuiMods 
> 			# ignore stop on AC 1 or 2 condition if THAT source type is generator
> 			if self._ac1_is_generator:
> 				stopOnAc1Reached = False
> 			else:
> 				stopOnAc1Reached = self._evaluate_condition(self._condition_stack[StopOnAc1Condition.name])
> 			if self._ac2_is_generator:
> 				stopOnAc2Reached = False
> 			else:
> 				stopOnAc2Reached = self._evaluate_condition(self._condition_stack[StopOnAc2Condition.name])
> 			stop_on_ac_reached = stopOnAc1Reached or stopOnAc2Reached
> #### end GuiMods 
642a740,745
> #### GuiMods
> 		## auto start disabled and generator is stopped - clear the 'reached' flags
> 		elif self._dbusservice['/State'] == States.STOPPED:
> 			for condition, data in self._condition_stack.items():
> 				self._reset_condition(data)
> 
649d751
< 		mtime = monotonic_time.monotonic_time().to_seconds_double()
652,653c754,759
< 		elif (int(mtime - self._starttime) >= self._settings['minimumruntime'] * 60
< 				or activecondition == 'manual'):
---
> 		elif self.manualStartAutoStop:
> 			logging.info ("manual start / auto stop: all stop conditions satisfied - generator not started")
> #### GuiMods
> 		# bypass the minimum run time check if External Override is active
> 		elif (self._dbusservice['/Runtime'] >= self._settings['minimumruntime'] * 60
> 				or activecondition == 'manual') or self._dbusservice['/ExternalOverride']:
654a761
> #### end GuiMods
671,672c778,779
< 			self._autostart_last_time = self._get_monotonic_seconds()
< 			self._remote_start_mode_last_time = self._get_monotonic_seconds()
---
> 			self._autostart_last_time = self._currentTime
> 			self._remote_start_mode_last_time = self._currentTime
681c788
< 			self._autostart_last_time = self._get_monotonic_seconds()
---
> 			self._autostart_last_time = self._currentTime
685c792
< 			timedisabled = self._get_monotonic_seconds() - self._autostart_last_time
---
> 			timedisabled = self._currentTime - self._autostart_last_time
692c799
< 			self._remote_start_mode_last_time = self._get_monotonic_seconds()
---
> 			self._remote_start_mode_last_time = self._currentTime
696c803
< 			timedisabled = self._get_monotonic_seconds() - self._remote_start_mode_last_time
---
> 			timedisabled = self._currentTime - self._remote_start_mode_last_time
700a808
> #### GuiMods warm-up / cool-down - rewrote so acInIsGenerator is updated even if alarm is disabled
702,706c810
< 		state = self._dbusservice['/State']
< 
< 		if state in [States.STOPPED, States.COOLDOWN, States.WARMUP]:
< 			self._reset_acpower_inverter_input()
< 			return
---
> 		self._acInIsGenerator = False	# covers all conditions that result in a return
708c812,813
< 		if self._settings['nogeneratoratacinalarm'] == 0:
---
> 		state = self._dbusservice['/State']
> 		if state in [States.STOPPED, States.STOPPING, States.COOLDOWN]: #States.WARMUP
725a831,837
> #### GuiMods warm-up / cool-down
> 		if self._settings['nogeneratoratacinalarm'] == 0 and self._generator_running:
> 			processAlarm = False
> 			self._reset_acpower_inverter_input()
> 		else:
> 			processAlarm = True
> 
727c839,842
< 			if self._acpower_inverter_input['unabletostart']:
---
> #### GuiMods warm-up / cool-down
> 			self._acInIsGenerator = True
> #### GuiMods warm-up / cool-down
> 			if processAlarm and self._acpower_inverter_input['unabletostart']:
730c845,849
< 		elif self._acpower_inverter_input['timeout'] < self.RETRIES_ON_ERROR:
---
> #### GuiMods warm-up / cool-down
> 		elif not processAlarm:
> 			self._reset_acpower_inverter_input()
> 			return
> 		elif self._acpower_inverter_input['timeout'] < self.ERROR_TIMEOUT:
735a855
> #### end GuiMods
820a941,948
> #### GuiMods
> 		# when starting manually and stopping based on conditions,
> 		#	start if stop condition is not yet satisfied
> 		if self.manualStartAutoStop and not stop:
> 			start = True
> 			condition['reached'] = True
> 			logging.info ("starting manually, stop based on %s reaching %d", name, stopvalue)
> #### end GuiMods
854c982,983
< 		if self._dbusservice['/ManualStartTimer'] != 0:
---
> #### GuiMods - change test to > 0 from != 0 to allow for start now / auto stop
> 		if self._dbusservice['/ManualStartTimer'] > 0:
1150c1279,1280
< 		remote_running = self._get_remote_switch_state()
---
> 		#remote_running = self._get_remote_switch_state()
> 		remote_running = state in (States.WARMUP, States.COOLDOWN, States.STOPPING, States.RUNNING)
1157,1159c1287,1294
< 			if self._settings['warmuptime'] and not (condition == "inverteroverload" and self._settings['inverteroverloadskipwarmup'] == 1):
< 				# Remove load while warming up
< 				self._set_ignore_ac(True)
---
> #### GuiMods warm-up / cool-down
> 			self.log_info('Starting generator by %s condition' % condition)
> 			# if there is a warmup time specified, always go through warm-up state
> 			#	regardless of AC input in use
> 			warmUpPeriod = self._settings['warmuptime']
> 			if warmUpPeriod > 0:
> 				self._warmUpEndTime = self._currentTime + warmUpPeriod
> 				self.log_info ("starting warm-up")
1160a1296
> 			# no warm-up go directly to running
1162a1299
> 				self._warmUpEndTime = 0
1164,1165c1301,1302
< 			self._update_remote_switch()
< 			self._starttime = monotonic_time.monotonic_time().to_seconds_double()
---
> 			self._coolDownEndTime = 0
> 			self._stoptime = 0
1167c1304
< 			self.log_info('Starting generator by %s condition' % condition)
---
> 			self._update_remote_switch()
1169,1173c1306
< 			if state == States.WARMUP:
< 				if monotonic_time.monotonic_time().to_seconds_double() - self._starttime > self._settings['warmuptime']:
< 					self._set_ignore_ac(False) # Release load onto Generator
< 					self._dbusservice['/State'] = States.RUNNING
< 			elif state in (States.COOLDOWN, States.STOPPING):
---
> 			if state in (States.COOLDOWN, States.STOPPING):
1175c1308
< 				self._set_ignore_ac(False) # Put load back onto Generator
---
> 				self.log_info ("aborting cool-down - returning to running")
1177a1311,1315
> 			elif state == States.WARMUP:
> 				if self._currentTime > self._warmUpEndTime:
> 					self.log_info ("warm-up complete")
> 					self._dbusservice['/State'] = States.RUNNING
> 
1181a1320,1321
> 			self._update_remote_switch()
> #### end GuiMods warm-up / cool-down
1188c1328
< 		remote_running = self._get_remote_switch_state()
---
> 		#remote_running = self._get_remote_switch_state()
1189a1330
> 		remote_running = running
1192,1230c1333,1374
< 			if self._settings['cooldowntime'] > 0:
< 				if state == States.RUNNING:
< 					self._dbusservice['/State'] = States.COOLDOWN
< 					self._stoptime = monotonic_time.monotonic_time().to_seconds_double()
< 
< 					# Remove load from Generator
< 					self._set_ignore_ac(True)
< 
< 					return
< 				elif state == States.COOLDOWN:
< 					if monotonic_time.monotonic_time().to_seconds_double() - \
< 							self._stoptime <= self._settings['cooldowntime']:
< 						return # Don't stop engine yet
< 
< 			# When we arrive here, a stop command was given during warmup, the
< 			# cooldown timer expired, or no cooldown was configured. Stop
< 			# the engine, but if we're coming from cooldown, delay another
< 			# while in the STOPPING state before reactivating AC-in.
< 			if state == States.COOLDOWN:
< 				self._dbusservice['/State'] = States.STOPPING
< 				self._update_remote_switch() # Stop engine
< 				return
< 			elif state == States.STOPPING:
< 				if monotonic_time.monotonic_time().to_seconds_double() - \
< 						self._stoptime <= self._settings['cooldowntime'] + self._settings['generatorstoptime']:
< 					return # Wait for engine stop
< 
< 			# All other possibilities are handled now. Cooldown is over or not
< 			# configured and we waited for the generator to shut down.
< 			self.log_info('Stopping generator that was running by %s condition' %
< 						str(self._dbusservice['/RunningByCondition']))
< 			self._dbusservice['/RunningByCondition'] = ''
< 			self._dbusservice['/RunningByConditionCode'] = RunningConditions.Stopped
< 			self._dbusservice['/State'] = States.STOPPED
< 			self._update_remote_switch()
< 			self._set_ignore_ac(False)
< 			self._dbusservice['/ManualStartTimer'] = 0
< 			self._manualstarttimer = 0
< 			self._starttime = 0
---
> #### GuiMods warm-up / cool-down
> 			if state == States.RUNNING:
> 				state = States.COOLDOWN
> 				if self._currentTime < self._coolDownEndTime:
> 					self._dbusservice['/State'] = state
> 					self._update_remote_switch() #Stop charger in Cooldown phase
> 					self.log_info ("starting cool-down")
> 				#elif self._settings['cooldowntime'] != 0:
> 				#	self.log_info ("skipping cool-down -- no AC load on generator")
> 
> 			# warm-up should also transition to stopping
> 			#	cool-down time will have expired since it's set to 0 when starting
> 			#	and there has not yet been a load on the generator
> 			if state in (States.WARMUP, States.COOLDOWN):
> 				# cool down complete
> 				if self._currentTime > self._coolDownEndTime:
> 					state = States.STOPPING
> 					self.log_info('Stopping generator that was running by %s condition' %
> 								str(self._dbusservice['/RunningByCondition']))
> 					self._update_remote_switch() # Stop engine
> 					self._stoptime = self._currentTime + self._settings['generatorstoptime']
> 					if self._currentTime < self._stoptime:
> 						self.log_info ("waiting for generator so stop")
> 					
> 			if state == States.STOPPING:
> 				# wait for stop period expired - finish up transition to STOPPED
> 				if self._currentTime > self._stoptime:
> 					if self._settings['generatorstoptime'] != 0:
> 						self.log_info ("generator stop time reached - OK to reconnect AC")
> 					state = States.STOPPED
> 					self._update_remote_switch()
> 					self._dbusservice['/RunningByCondition'] = ''
> 					self._dbusservice['/RunningByConditionCode'] = RunningConditions.Stopped
> 					self._update_accumulated_time()
> 					self._starttime = 0
> 					self._dbusservice['/Runtime'] = 0
> 					self._dbusservice['/ManualStartTimer'] = 0
> 					self._manualstarttimer = 0
> 					self._last_runtime_update = 0
> 
> 		self._dbusservice['/State'] = state
> #### end GuiMods warm-up / cool-down
1241a1386,1390
> #### GuiMods warm-up / cool-down
> 	# stock code does not handle changes in the input type
> 	# which could happen with an external transfer switch
> 	# doing things this way should handle it
> 
1245,1249c1394,1419
< 		if self._vebusservice is not None:
< 			if self._ac1_is_generator:
< 				self._dbusmonitor.set_value_async(self._vebusservice, '/Ac/Control/IgnoreAcIn1', dbus.Int32(ignore, variant_level=1))
< 			if self._ac2_is_generator:
< 				self._dbusmonitor.set_value_async(self._vebusservice, '/Ac/Control/IgnoreAcIn2', dbus.Int32(ignore, variant_level=1))
---
> 		if self._vebusservice is None:
> 			return
> 		self._activeAcInIsIgnored = ignore
> 		ignore1 = False
> 		ignore2 = False
> 		if self._ac1_is_generator:
> 			ignore1 = ignore
> 		elif self._ac2_is_generator:
> 			ignore2 = ignore
> 
> 		if ignore1 != self._ac1isIgnored:
> 			if ignore1:
> 				self.log_info ("shedding load - AC input 1")
> 			else:
> 				self.log_info ("restoring load - AC input 1")
> 			self._dbusmonitor.set_value_async(self._vebusservice, '/Ac/Control/IgnoreAcIn1', dbus.Int32(ignore1, variant_level=1))
> 			self._ac1isIgnored = ignore1
> 
> 		if ignore2 != self._ac2isIgnored:
> 			if ignore2:
> 				self.log_info ("shedding load - AC input 2")
> 			else:
> 				self.log_info ("restoring load - AC input 2")
> 			self._dbusmonitor.set_value_async(self._vebusservice, '/Ac/Control/IgnoreAcIn2', dbus.Int32(ignore2, variant_level=1))
> 			self._ac2isIgnored = ignore2
> #### end GuiMods warm-up / cool-down
1253c1423,1424
< 		v = self._dbusservice['/State'] in (States.RUNNING, States.WARMUP, States.COOLDOWN)
---
> 		# We redefine engine as something else. We have charger connected to the relay, therefor it only needs to be on in the "Running" Condition
> 		v = self._dbusservice['/State'] in (States.RUNNING, States.RUNNING) #Two times to keep the datatype
1292a1464,1502
> 
> #### GuiMods
> # this function connects the generator digital input (if any)
> # to the generator /ManualStart
> #
> # if the generator digital input changes from stopped to running
> # AND no run conditions are active, a manual start is innitiated
> #
> # if the generator digital input changes from running to stopped
> # AND a manual start is active, a manual stop is innitiated
> #
> # /ExternalOverride is used by the GUI to alert the user when there is a conflict
> # between the running state reported by the generator and the expected state
> # /ExternalOverride is True if the states differ
> # activation is delayed 5 seconds to allow transitions to settle
> 
> 	def syncManualRunToExternalState (self):
> 		internalRun = self._dbusservice['/State'] in (States.RUNNING, States.WARMUP, States.COOLDOWN)
> 		externalRun = self._is_running
> 		# forward input state changes to /ManualStart
> 		if self._linkToExternalState and externalRun != self._lastIsRunning:
> 			if externalRun and not internalRun:
> 				self.log_info ("generator was started externally - syncing ManualStart state")
> 				self._dbusservice['/ManualStart'] = 1
> 			elif not externalRun and internalRun and self._dbusservice['/ManualStart'] == 1:
> 				self.log_info ("generator was stopped externally - syncing ManualStart state")
> 				self._dbusservice['/ManualStart'] = 0
> 		self._lastIsRunning = externalRun
> 
> 		# update ExternalOverride
> 		if externalRun != internalRun:
> 			if self._externalOverrideDelay > 5:
> 				self._dbusservice['/ExternalOverride'] = 1
> 			else:
> 				self._externalOverrideDelay += 1
> 		else:
> 			self._dbusservice['/ExternalOverride'] = 0
> 			self._externalOverrideDelay = 0
> #### end GuiMods
