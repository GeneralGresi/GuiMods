299a300
> 		self.ERROR_TIMEOUT = 60
620c621
< 		if state == States.RUNNING and self._acInIsGenerator:
---
> 		if state == States.RUNNING:
812c813
< 		if state in [States.STOPPED, States.COOLDOWN, States.WARMUP]:
---
> 		if state in [States.STOPPED, States.STOPPING, States.COOLDOWN]: #States.WARMUP
831c832
< 		if self._settings['nogeneratoratacinalarm'] == 0:
---
> 		if self._settings['nogeneratoratacinalarm'] == 0 and self._generator_running:
848c849
< 		elif self._acpower_inverter_input['timeout'] < self.RETRIES_ON_ERROR:
---
> 		elif self._acpower_inverter_input['timeout'] < self.ERROR_TIMEOUT:
1278c1279,1280
< 		remote_running = self._get_remote_switch_state()
---
> 		#remote_running = self._get_remote_switch_state()
> 		remote_running = state in (States.WARMUP, States.COOLDOWN, States.STOPPING, States.RUNNING)
1317a1320
> 			self._update_remote_switch()
1325c1328
< 		remote_running = self._get_remote_switch_state()
---
> 		#remote_running = self._get_remote_switch_state()
1326a1330
> 		remote_running = running
1332a1337,1338
> 					self._dbusservice['/State'] = state
> 					self._update_remote_switch() #Stop charger in Cooldown phase
1334,1335c1340,1341
< 				elif self._settings['cooldowntime'] != 0:
< 					self.log_info ("skipping cool-down -- no AC load on generator")
---
> 				#elif self._settings['cooldowntime'] != 0:
> 				#	self.log_info ("skipping cool-down -- no AC load on generator")
1417c1423,1424
< 		v = self._dbusservice['/State'] in (States.RUNNING, States.WARMUP, States.COOLDOWN)
---
> 		# We redefine engine as something else. We have charger connected to the relay, therefor it only needs to be on in the "Running" Condition
> 		v = self._dbusservice['/State'] in (States.RUNNING, States.RUNNING) #Two times to keep the datatype
