diff --git a/FileSets/v3.52/startstop.py b/FileSets/v3.52/startstop.py
index 244de09..dc8e083 100644
--- a/FileSets/v3.52/startstop.py
+++ b/FileSets/v3.52/startstop.py
@@ -297,6 +297,7 @@ class StartStop(object):
 
 		# Two different starttime values.
 		# starttime_fb is set by the modules (relay.py, genset.py) and will be set to the current time when
+		self.ERROR_TIMEOUT = 60
 		# the feedback mechanism (digital input / `/StatusCode`) indicates that the generator is running.
 		# The other one is set by startstop when commanding the module to start the generator and is used by the
 		# warm-up mechanism to ensure warm-up finishes without needing feedback that the generator has actually started.
@@ -617,7 +618,7 @@ class StartStop(object):
 		# this is done because acInIsGenerator may change by an external transfer switch
 		# and we want an accurate picture of the cool down end time
 		#	based on the last time the generatot was loaded
-		if state == States.RUNNING and self._acInIsGenerator:
+		if state == States.RUNNING:
 			self._coolDownEndTime = self._currentTime + self._settings['cooldowntime']
 #### end GuiMods warm-up / cool-down
 
@@ -792,7 +793,7 @@ class StartStop(object):
 		self._acInIsGenerator = False	# covers all conditions that result in a return
 
 		state = self._dbusservice['/State']
-		if state in [States.STOPPED, States.COOLDOWN, States.WARMUP]:
+		if state in [States.STOPPED, States.STOPPING, States.COOLDOWN]: #States.WARMUP
 			self._reset_acpower_inverter_input()
 			return
 
@@ -811,7 +812,7 @@ class StartStop(object):
 		activein_connected = activein_state == 1
 
 #### GuiMods warm-up / cool-down
-		if self._settings['nogeneratoratacinalarm'] == 0:
+		if self._settings['nogeneratoratacinalarm'] == 0 and self._generator_running:
 			processAlarm = False
 			self._reset_acpower_inverter_input()
 		else:
@@ -828,7 +829,7 @@ class StartStop(object):
 		elif not processAlarm:
 			self._reset_acpower_inverter_input()
 			return
-		elif self._acpower_inverter_input['timeout'] < self.RETRIES_ON_ERROR:
+		elif self._acpower_inverter_input['timeout'] < self.ERROR_TIMEOUT:
 			self._acpower_inverter_input['timeout'] += 1
 		elif not self._acpower_inverter_input['unabletostart']:
 			self._acpower_inverter_input['unabletostart'] = True
@@ -1262,7 +1263,8 @@ class StartStop(object):
 
 	def _start_generator(self, condition):
 		state = self._dbusservice['/State']
-		remote_running = self._get_remote_switch_state()
+		#remote_running = self._get_remote_switch_state()
+		remote_running = state in (States.WARMUP, States.COOLDOWN, States.STOPPING, States.RUNNING)
 
 		# This function will start the generator in the case generator not
 		# already running. When differs, the RunningByCondition is updated
@@ -1302,6 +1304,7 @@ class StartStop(object):
 			if self._dbusservice['/RunningByCondition'] != condition:
 				self.log_info('Generator previously running by %s condition is now running by %s condition'
 							% (self._dbusservice['/RunningByCondition'], condition))
+			self._update_remote_switch()
 #### end GuiMods warm-up / cool-down
 
 		self._dbusservice['/RunningByCondition'] = condition
@@ -1309,17 +1312,20 @@ class StartStop(object):
 
 	def _stop_generator(self):
 		state = self._dbusservice['/State']
-		remote_running = self._get_remote_switch_state()
+		#remote_running = self._get_remote_switch_state()
 		running = state in (States.WARMUP, States.COOLDOWN, States.STOPPING, States.RUNNING)
+		remote_running = running
 
 		if running or remote_running:
 #### GuiMods warm-up / cool-down
 			if state == States.RUNNING:
 				state = States.COOLDOWN
 				if self._currentTime < self._coolDownEndTime:
+					self._dbusservice['/State'] = state
+					self._update_remote_switch() #Stop charger in Cooldown phase
 					self.log_info ("starting cool-down")
-				elif self._settings['cooldowntime'] != 0:
-					self.log_info ("skipping cool-down -- no AC load on generator")
+				#elif self._settings['cooldowntime'] != 0:
+				#	self.log_info ("skipping cool-down -- no AC load on generator")
 
 			# warm-up should also transition to stopping
 			#	cool-down time will have expired since it's set to 0 when starting
@@ -1401,7 +1407,8 @@ class StartStop(object):
 
 	def _update_remote_switch(self):
 		# Engine should be started in these states
-		v = self._dbusservice['/State'] in (States.RUNNING, States.WARMUP, States.COOLDOWN)
+		# We redefine engine as something else. We have charger connected to the relay, therefor it only needs to be on in the "Running" Condition
+		v = self._dbusservice['/State'] in (States.RUNNING, States.RUNNING) #Two times to keep the datatype
 		self._set_remote_switch_state(dbus.Int32(v, variant_level=1))
 
 	def _running_by_digital_input(self, path, value):
